
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 05 22:33:07 CET 2019
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java.util.HashMap;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 05 22:33:07 CET 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\002\004\000\002\005\010\000\002\007\005" +
    "\000\002\007\002\000\002\007\004\000\002\015\006\000" +
    "\002\015\011\000\002\015\012\000\002\015\002\000\002" +
    "\016\005\000\002\016\002\000\002\006\003\000\002\006" +
    "\002\000\002\011\005\000\002\017\006\000\002\017\002" +
    "\000\002\017\004\000\002\013\005\000\002\013\002\000" +
    "\002\013\004\000\002\010\012\000\002\010\002\000\002" +
    "\010\004\000\002\012\003\000\002\012\006\000\002\012" +
    "\002\000\002\012\004\000\002\025\005\000\002\025\005" +
    "\000\002\025\010\000\002\025\005\000\002\022\010\000" +
    "\002\022\012\000\002\026\004\000\002\026\004\000\002" +
    "\026\004\000\002\026\004\000\002\021\011\000\002\003" +
    "\007\000\002\004\006\000\002\020\010\000\002\024\005" +
    "\000\002\024\005\000\002\024\007\000\002\024\002\000" +
    "\002\024\004\000\002\023\004\000\002\023\002\000\002" +
    "\014\005\000\002\030\007\000\002\030\010\000\002\030" +
    "\012\000\002\030\002\000\002\031\005\000\002\031\002" +
    "\000\002\032\015\000\002\033\003\000\002\033\003\000" +
    "\002\027\004\000\002\027\006\000\002\027\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\010\002\uffff\003\005\004\004\001\002\000" +
    "\010\003\012\006\013\010\ufffb\001\002\000\010\002\uffff" +
    "\003\005\004\004\001\002\000\004\002\000\001\002\000" +
    "\004\002\010\001\002\000\004\002\001\001\002\000\004" +
    "\002\ufffe\001\002\000\010\003\012\006\013\010\ufffb\001" +
    "\002\000\012\007\ufff6\044\233\046\235\053\236\001\002" +
    "\000\004\010\016\001\002\000\010\003\033\012\035\016" +
    "\uffec\001\002\000\010\003\020\011\uffef\057\017\001\002" +
    "\000\006\021\ufff4\061\025\001\002\000\010\003\020\011" +
    "\uffef\057\017\001\002\000\004\011\022\001\002\000\010" +
    "\003\ufff1\012\ufff1\016\ufff1\001\002\000\004\011\uffee\001" +
    "\002\000\004\021\031\001\002\000\012\020\026\021\ufff2" +
    "\026\ufff2\061\ufff2\001\002\000\012\021\ufff3\026\ufff3\027" +
    "\ufff3\061\ufff3\001\002\000\010\021\ufff4\026\ufff4\061\025" +
    "\001\002\000\006\021\ufff5\026\ufff5\001\002\000\010\003" +
    "\020\011\uffef\057\017\001\002\000\004\011\ufff0\001\002" +
    "\000\010\003\033\012\035\016\uffec\001\002\000\004\016" +
    "\160\001\002\000\010\003\036\013\uffe9\014\037\001\002" +
    "\000\010\003\036\013\uffe9\014\037\001\002\000\004\061" +
    "\042\001\002\000\004\013\041\001\002\000\004\016\uffed" +
    "\001\002\000\004\035\043\001\002\000\020\003\055\015" +
    "\uffe5\032\047\036\057\043\050\050\052\061\044\001\002" +
    "\000\004\021\153\001\002\000\004\015\147\001\002\000" +
    "\026\003\055\015\uffe5\032\047\034\uffe5\036\057\040\uffe5" +
    "\041\uffe5\043\050\050\052\061\044\001\002\000\004\061" +
    "\132\001\002\000\004\027\107\001\002\000\026\003\055" +
    "\015\uffe5\032\047\034\uffe5\036\057\040\uffe5\041\uffe5\043" +
    "\050\050\052\061\044\001\002\000\004\061\103\001\002" +
    "\000\026\003\055\015\uffe5\032\047\034\uffe5\036\057\040" +
    "\uffe5\041\uffe5\043\050\050\052\061\044\001\002\000\026" +
    "\003\055\015\uffe5\032\047\034\uffe5\036\057\040\uffe5\041" +
    "\uffe5\043\050\050\052\061\044\001\002\000\026\003\055" +
    "\015\uffe5\032\047\034\uffe5\036\057\040\uffe5\041\uffe5\043" +
    "\050\050\052\061\044\001\002\000\012\015\uffe7\034\uffe7" +
    "\040\uffe7\041\uffe7\001\002\000\004\027\061\001\002\000" +
    "\004\037\070\001\002\000\004\061\062\001\002\000\004" +
    "\021\063\001\002\000\004\045\064\001\002\000\004\031" +
    "\065\001\002\000\004\054\066\001\002\000\004\030\067" +
    "\001\002\000\004\037\uffd9\001\002\000\012\032\047\036" +
    "\057\043\050\061\044\001\002\000\006\040\072\041\073" +
    "\001\002\000\012\032\047\036\057\043\050\061\044\001" +
    "\002\000\004\023\074\001\002\000\026\003\uffdf\015\uffdf" +
    "\032\uffdf\034\uffdf\036\uffdf\040\uffdf\041\uffdf\043\uffdf\050" +
    "\uffdf\061\uffdf\001\002\000\004\041\076\001\002\000\004" +
    "\023\077\001\002\000\026\003\uffde\015\uffde\032\uffde\034" +
    "\uffde\036\uffde\040\uffde\041\uffde\043\uffde\050\uffde\061\uffde" +
    "\001\002\000\012\015\uffe4\034\uffe4\040\uffe4\041\uffe4\001" +
    "\002\000\012\015\uffdd\034\uffdd\040\uffdd\041\uffdd\001\002" +
    "\000\012\015\uffdc\034\uffdc\040\uffdc\041\uffdc\001\002\000" +
    "\004\023\104\001\002\000\026\003\055\015\uffe5\032\047" +
    "\034\uffe5\036\057\040\uffe5\041\uffe5\043\050\050\052\061" +
    "\044\001\002\000\012\015\uffe6\034\uffe6\040\uffe6\041\uffe6" +
    "\001\002\000\012\015\uffdb\034\uffdb\040\uffdb\041\uffdb\001" +
    "\002\000\012\003\110\030\uffd2\060\113\061\112\001\002" +
    "\000\012\003\110\030\uffd2\060\113\061\112\001\002\000" +
    "\004\030\126\001\002\000\016\003\uffcf\020\115\021\120" +
    "\030\uffcf\060\uffcf\061\uffcf\001\002\000\014\003\uffcf\020" +
    "\115\030\uffcf\060\uffcf\061\uffcf\001\002\000\012\003\110" +
    "\030\uffd2\060\113\061\112\001\002\000\014\003\uffcf\020" +
    "\115\030\uffcf\060\uffcf\061\uffcf\001\002\000\012\003\uffd0" +
    "\030\uffd0\060\uffd0\061\uffd0\001\002\000\004\030\uffd5\001" +
    "\002\000\004\045\123\001\002\000\012\003\110\030\uffd2" +
    "\060\113\061\112\001\002\000\004\030\uffd4\001\002\000" +
    "\014\003\uffcf\020\115\030\uffcf\060\uffcf\061\uffcf\001\002" +
    "\000\012\003\110\030\uffd2\060\113\061\112\001\002\000" +
    "\004\030\uffd3\001\002\000\004\023\127\001\002\000\026" +
    "\003\uffd8\015\uffd8\032\uffd8\034\uffd8\036\uffd8\040\uffd8\041" +
    "\uffd8\043\uffd8\050\uffd8\061\uffd8\001\002\000\004\030\uffd1" +
    "\001\002\000\004\033\142\001\002\000\004\022\133\001" +
    "\002\000\010\046\134\053\136\061\135\001\002\000\006" +
    "\027\137\033\uffe0\001\002\000\004\033\uffe2\001\002\000" +
    "\004\033\uffe3\001\002\000\004\056\140\001\002\000\004" +
    "\030\141\001\002\000\004\033\uffe1\001\002\000\012\032" +
    "\047\036\057\043\050\061\044\001\002\000\004\034\144" +
    "\001\002\000\004\023\145\001\002\000\026\003\uffd6\015" +
    "\uffd6\032\uffd6\034\uffd6\036\uffd6\040\uffd6\041\uffd6\043\uffd6" +
    "\050\uffd6\061\uffd6\001\002\000\012\015\uffda\034\uffda\040" +
    "\uffda\041\uffda\001\002\000\004\061\150\001\002\000\004" +
    "\035\151\001\002\000\010\003\036\013\uffe9\014\037\001" +
    "\002\000\004\013\uffea\001\002\000\004\055\154\001\002" +
    "\000\004\023\155\001\002\000\026\003\uffd7\015\uffd7\032" +
    "\uffd7\034\uffd7\036\uffd7\040\uffd7\041\uffd7\043\uffd7\050\uffd7" +
    "\061\uffd7\001\002\000\004\013\uffe8\001\002\000\004\005" +
    "\231\001\002\000\010\017\uffca\047\163\051\161\001\002" +
    "\000\004\061\217\001\002\000\004\017\216\001\002\000" +
    "\004\061\164\001\002\000\004\025\165\001\002\000\006" +
    "\024\166\027\170\001\002\000\006\026\uffc8\027\170\001" +
    "\002\000\004\021\205\001\002\000\006\042\172\052\173" +
    "\001\002\000\004\020\174\001\002\000\006\020\uffc5\030" +
    "\uffc5\001\002\000\006\020\uffc6\030\uffc6\001\002\000\006" +
    "\042\172\052\173\001\002\000\004\020\176\001\002\000" +
    "\006\042\172\052\173\001\002\000\004\020\200\001\002" +
    "\000\006\042\172\052\173\001\002\000\004\020\202\001" +
    "\002\000\006\042\172\052\173\001\002\000\004\030\204" +
    "\001\002\000\012\020\uffc7\021\uffc7\026\uffc7\027\uffc7\001" +
    "\002\000\010\017\uffca\047\163\051\161\001\002\000\004" +
    "\017\uffcc\001\002\000\010\020\026\026\ufff2\027\ufff2\001" +
    "\002\000\004\026\211\001\002\000\004\021\212\001\002" +
    "\000\010\017\uffca\047\163\051\161\001\002\000\004\017" +
    "\uffcb\001\002\000\006\026\uffc8\027\170\001\002\000\004" +
    "\026\uffc9\001\002\000\004\005\uffce\001\002\000\004\025" +
    "\220\001\002\000\014\017\uffc2\024\221\047\uffc2\051\uffc2" +
    "\061\223\001\002\000\006\026\ufff4\061\025\001\002\000" +
    "\010\017\uffca\047\163\051\161\001\002\000\004\021\224" +
    "\001\002\000\010\017\uffc4\047\uffc4\051\uffc4\001\002\000" +
    "\004\017\uffcd\001\002\000\004\026\227\001\002\000\004" +
    "\021\230\001\002\000\010\017\uffc3\047\uffc3\051\uffc3\001" +
    "\002\000\004\002\ufffd\001\002\000\004\016\uffeb\001\002" +
    "\000\004\061\251\001\002\000\004\007\250\001\002\000" +
    "\004\027\242\001\002\000\006\021\ufff4\061\025\001\002" +
    "\000\004\021\240\001\002\000\012\007\ufff6\044\233\046" +
    "\235\053\236\001\002\000\004\007\ufff9\001\002\000\004" +
    "\056\243\001\002\000\004\030\244\001\002\000\006\021" +
    "\ufff4\061\025\001\002\000\004\021\246\001\002\000\012" +
    "\007\ufff6\044\233\046\235\053\236\001\002\000\004\007" +
    "\ufff8\001\002\000\004\010\ufffc\001\002\000\004\025\252" +
    "\001\002\000\004\024\253\001\002\000\006\026\ufff4\061" +
    "\025\001\002\000\004\026\255\001\002\000\004\021\256" +
    "\001\002\000\012\007\ufff6\044\233\046\235\053\236\001" +
    "\002\000\004\007\ufff7\001\002\000\004\010\ufffa\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\006\002\006\005\005\001\001\000\004\007" +
    "\013\001\001\000\006\002\010\005\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\257\001\001\000\004\015\233\001\001" +
    "\000\004\011\014\001\001\000\004\013\033\001\001\000" +
    "\004\017\020\001\001\000\004\016\023\001\001\000\004" +
    "\017\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\026\001\001" +
    "\000\002\001\001\000\004\016\027\001\001\000\002\001" +
    "\001\000\004\017\031\001\001\000\002\001\001\000\004" +
    "\013\231\001\001\000\004\014\156\001\001\000\004\010" +
    "\037\001\001\000\004\010\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\052\004\053\012\044\020\050\022\045\026\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\052\004\053\012\145\020\050\022\045\026\055\001\001" +
    "\000\004\025\130\001\001\000\002\001\001\000\016\003" +
    "\052\004\053\012\105\020\050\022\045\026\055\001\001" +
    "\000\002\001\001\000\016\003\052\004\053\012\101\020" +
    "\050\022\045\026\055\001\001\000\016\003\052\004\053" +
    "\012\100\020\050\022\045\026\055\001\001\000\016\003" +
    "\052\004\053\012\077\020\050\022\045\026\055\001\001" +
    "\000\002\001\001\000\004\021\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\052\004\053\020\050\022\045" +
    "\026\070\001\001\000\002\001\001\000\014\003\052\004" +
    "\053\020\050\022\045\026\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\052\004\053\012" +
    "\104\020\050\022\045\026\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\110\001\001\000\004\024" +
    "\127\001\001\000\002\001\001\000\004\023\120\001\001" +
    "\000\004\023\113\001\001\000\004\024\116\001\001\000" +
    "\004\023\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\121\001\001\000\002\001" +
    "\001\000\004\023\123\001\001\000\004\024\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\052\004\053\020\050\022\045\026\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\166\001\001\000\006\031\207\032\206\001\001" +
    "\000\002\001\001\000\004\033\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\174" +
    "\001\001\000\002\001\001\000\004\033\176\001\001\000" +
    "\002\001\001\000\004\033\200\001\001\000\002\001\001" +
    "\000\004\033\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\205\001\001\000\002\001\001\000\004" +
    "\006\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\212\001\001\000\002\001\001\000\006\031\214" +
    "\032\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\221\001\001\000\004\016\225" +
    "\001\001\000\004\030\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\236\001\001\000\002\001\001\000\004\015" +
    "\240\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\244\001\001\000\002\001\001\000" +
    "\004\015\246\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\253\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\256" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   //Done parsing(); brutally leave 

   public static void main(String args[]) throws Exception {
      new parser(new Yylex(new InputStreamReader(System.in))).parse();
   }
   public void syntax_error(Symbol cur_token){
            System.out.println("ERR "+currentToken()+ " line = "+pline() + "column " + pcol());

   }
   public void report_fatal_error(String message , Object info){
      System.out.println("ERR "+currentToken()+ " line = "+pline() + "column " + pcol());
   }
   public void report_error(String message , Object info){
      System.out.println("ERR "+currentToken()+ " line = "+pline() + "column " + pcol());

   }
   public void unrecovered_syntax_error(Symbol cur_token){
      System.out.println("ERR "+currentToken()+ " line = "+pline() + "column " + pcol());
   }   
   HashMap<String,Object> symTable = new HashMap<String,Object>();

   public int pline(){
      return ((Yylex)getScanner()).getYyLine();
   }
   public int pcol(){
      return ((Yylex)getScanner()).getYyColumn();
   }
   public String currentToken(){
      return ((Yylex)getScanner()).getYyText();
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // assocRes ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assocRes",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // assocRes ::= ACCOUV listeIdent ACCCFERM POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assocRes",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // assocRes ::= IDENT POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assocRes",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // var ::= UNDERSCORE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // var ::= ENTIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // nbr ::= PAROUV var VIRG var VIRG var VIRG var VIRG var PARFERM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nbr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // listeNbr ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeNbr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // listeNbr ::= nbr S listeNbr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeNbr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instrComm ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrComm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instrComm ::= PROGRAMMER IDENT EG ACCOUV listeNbr ACCCFERM POINT instrComm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrComm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instrComm ::= PROGRAMMER IDENT EG nbr POINT instrComm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrComm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instrComm ::= ASSOCIER IDENT EG assocRes instrComm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrComm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declCommande ::= BALISEDEBDECLCOMMANDE instrComm BALISEFINDECLCOMMANDE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declCommande",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sep ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sep",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sep ::= VIRG sep 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sep",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // chaineMessage ::= error chaineMessage 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chaineMessage",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // chaineMessage ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chaineMessage",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // chaineMessage ::= IDENT POINT MCETAT sep chaineMessage 
            {
              Object RESULT =null;
		/* Verifier dans la semantique que sep n'est pas un epsilon au debut*/
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chaineMessage",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // chaineMessage ::= IDENT sep chaineMessage 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chaineMessage",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // chaineMessage ::= CHAINE sep chaineMessage 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chaineMessage",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // boucle ::= POURTOUT condBoucle FAIRE instr FAIT PVIRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boucle",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // act ::= IDENT POINT ACTION PVIRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("act",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // mess ::= MESSAGE PAROUV chaineMessage PARFERM PVIRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mess",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cond ::= PAROUV IDENT POINT MCETAT DOUBLEEG ETAT PARFERM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instr ::= condition instrScenario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instr ::= boucle instrScenario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instr ::= mess instrScenario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instr ::= act instrScenario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condition ::= SI cond ALORS instr SINON instr FSI PVIRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condition ::= SI cond ALORS instr FSI PVIRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condBoucle ::= IDENT DP AUTREAPPAREIL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condBoucle",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condBoucle ::= IDENT DP AUTREAPPAREIL PAROUV TYPEAUTREAPP PARFERM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condBoucle",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condBoucle ::= IDENT DP IDENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condBoucle",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condBoucle ::= IDENT DP TYPEAPP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condBoucle",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instrScenario ::= error instrScenario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrScenario",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instrScenario ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrScenario",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instrScenario ::= EXECUTERSCENARIO IDENT PVIRG instrScenario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrScenario",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instrScenario ::= instr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrScenario",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listeScenar ::= error listeScenar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeScenar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listeScenar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeScenar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listeScenar ::= BALISEDECLSCENARIO IDENT PLUGR instrScenario BALISEFINSCENARIO IDENT PLUGR listeScenar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeScenar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declScenarii ::= error declScenarii 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declScenarii",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declScenarii ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declScenarii",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declScenarii ::= BALISEDEBDECLSCENARII listeScenar BALISEFINDECLSCENARII 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declScenarii",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instrInterf ::= error instrInterf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrInterf",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instrInterf ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrInterf",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instrInterf ::= INTERFACE listeIdent POINT instrInterf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrInterf",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declInterface ::= BALISEDEBDECLINTERF instrInterf BALISEFINDECLINTERF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declInterface",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // S ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // S ::= VIRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // listeIdent ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeIdent",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // listeIdent ::= IDENT S listeIdent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeIdent",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrDecl ::= 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrDecl ::= DEFINIR IDENT EG ACCOUV listeIdent ACCCFERM POINT instrDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrDecl ::= AUTREAPPAREIL PAROUV TYPEAUTREAPP PARFERM listeIdent POINT instrDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrDecl ::= TYPEAPP listeIdent POINT instrDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declApp ::= error declApp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declApp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declApp ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declApp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declApp ::= BALISEDEBDECLAPP instrDecl BALISEFINDECLAPP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declApp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // liste ::= BALISEDEBPROG declApp declInterface declScenarii declCommande BALISEFINPROG 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog ::= error prog 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= liste 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

