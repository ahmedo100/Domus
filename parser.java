
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Dec 10 23:06:17 CET 2019
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.io.FileWriter;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Dec 10 23:06:17 CET 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\002\004\000\002\005\010\000\002\007\005" +
    "\000\002\007\002\000\002\007\004\000\002\015\002\000" +
    "\002\015\006\000\002\015\011\000\002\015\012\000\002" +
    "\017\005\000\002\017\003\000\002\036\005\000\002\036" +
    "\003\000\002\035\005\000\002\035\003\000\002\006\003" +
    "\000\002\006\002\000\002\011\005\000\002\016\006\000" +
    "\002\016\002\000\002\016\004\000\002\013\005\000\002" +
    "\013\002\000\002\013\004\000\002\010\012\000\002\010" +
    "\002\000\002\010\004\000\002\012\003\000\002\012\006" +
    "\000\002\012\002\000\002\012\004\000\002\025\005\000" +
    "\002\025\005\000\002\025\010\000\002\025\005\000\002" +
    "\022\010\000\002\022\012\000\002\026\004\000\002\026" +
    "\004\000\002\026\004\000\002\026\004\000\002\021\011" +
    "\000\002\003\007\000\002\004\006\000\002\020\010\000" +
    "\002\024\005\000\002\024\005\000\002\024\007\000\002" +
    "\024\002\000\002\024\004\000\002\023\004\000\002\023" +
    "\002\000\002\014\005\000\002\030\007\000\002\030\010" +
    "\000\002\030\012\000\002\030\002\000\002\031\005\000" +
    "\002\031\002\000\002\032\015\000\002\033\003\000\002" +
    "\033\003\000\002\027\004\000\002\027\006\000\002\027" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\010\002\uffff\003\005\004\004\001\002\000" +
    "\010\003\012\006\013\010\ufffb\001\002\000\010\002\uffff" +
    "\003\005\004\004\001\002\000\004\002\000\001\002\000" +
    "\004\002\010\001\002\000\004\002\001\001\002\000\004" +
    "\002\ufffe\001\002\000\010\003\012\006\013\010\ufffb\001" +
    "\002\000\012\007\ufff9\044\233\046\235\053\236\001\002" +
    "\000\004\010\016\001\002\000\010\003\033\012\035\016" +
    "\uffe8\001\002\000\010\003\020\011\uffeb\057\017\001\002" +
    "\000\004\061\025\001\002\000\010\003\020\011\uffeb\057" +
    "\017\001\002\000\004\011\022\001\002\000\010\003\uffed" +
    "\012\uffed\016\uffed\001\002\000\004\011\uffea\001\002\000" +
    "\004\021\031\001\002\000\012\020\027\021\ufff4\026\ufff4" +
    "\061\uffee\001\002\000\004\061\025\001\002\000\010\026" +
    "\uffef\027\uffef\061\uffef\001\002\000\006\021\ufff5\026\ufff5" +
    "\001\002\000\010\003\020\011\uffeb\057\017\001\002\000" +
    "\004\011\uffec\001\002\000\010\003\033\012\035\016\uffe8" +
    "\001\002\000\004\016\160\001\002\000\010\003\036\013" +
    "\uffe5\014\037\001\002\000\010\003\036\013\uffe5\014\037" +
    "\001\002\000\004\061\042\001\002\000\004\013\041\001" +
    "\002\000\004\016\uffe9\001\002\000\004\035\043\001\002" +
    "\000\020\003\055\015\uffe1\032\047\036\057\043\050\050" +
    "\051\061\044\001\002\000\004\021\153\001\002\000\004" +
    "\015\147\001\002\000\026\003\055\015\uffe1\032\047\034" +
    "\uffe1\036\057\040\uffe1\041\uffe1\043\050\050\051\061\044" +
    "\001\002\000\004\061\132\001\002\000\004\027\107\001" +
    "\002\000\004\061\104\001\002\000\026\003\055\015\uffe1" +
    "\032\047\034\uffe1\036\057\040\uffe1\041\uffe1\043\050\050" +
    "\051\061\044\001\002\000\026\003\055\015\uffe1\032\047" +
    "\034\uffe1\036\057\040\uffe1\041\uffe1\043\050\050\051\061" +
    "\044\001\002\000\026\003\055\015\uffe1\032\047\034\uffe1" +
    "\036\057\040\uffe1\041\uffe1\043\050\050\051\061\044\001" +
    "\002\000\026\003\055\015\uffe1\032\047\034\uffe1\036\057" +
    "\040\uffe1\041\uffe1\043\050\050\051\061\044\001\002\000" +
    "\012\015\uffe3\034\uffe3\040\uffe3\041\uffe3\001\002\000\004" +
    "\027\061\001\002\000\004\037\070\001\002\000\004\061" +
    "\062\001\002\000\004\021\063\001\002\000\004\045\064" +
    "\001\002\000\004\031\065\001\002\000\004\054\066\001" +
    "\002\000\004\030\067\001\002\000\004\037\uffd5\001\002" +
    "\000\012\032\047\036\057\043\050\061\044\001\002\000" +
    "\006\040\072\041\073\001\002\000\012\032\047\036\057" +
    "\043\050\061\044\001\002\000\004\023\074\001\002\000" +
    "\026\003\uffdb\015\uffdb\032\uffdb\034\uffdb\036\uffdb\040\uffdb" +
    "\041\uffdb\043\uffdb\050\uffdb\061\uffdb\001\002\000\004\041" +
    "\076\001\002\000\004\023\077\001\002\000\026\003\uffda" +
    "\015\uffda\032\uffda\034\uffda\036\uffda\040\uffda\041\uffda\043" +
    "\uffda\050\uffda\061\uffda\001\002\000\012\015\uffe0\034\uffe0" +
    "\040\uffe0\041\uffe0\001\002\000\012\015\uffd9\034\uffd9\040" +
    "\uffd9\041\uffd9\001\002\000\012\015\uffd8\034\uffd8\040\uffd8" +
    "\041\uffd8\001\002\000\012\015\uffd7\034\uffd7\040\uffd7\041" +
    "\uffd7\001\002\000\004\023\105\001\002\000\026\003\055" +
    "\015\uffe1\032\047\034\uffe1\036\057\040\uffe1\041\uffe1\043" +
    "\050\050\051\061\044\001\002\000\012\015\uffe2\034\uffe2" +
    "\040\uffe2\041\uffe2\001\002\000\012\003\110\030\uffce\060" +
    "\113\061\112\001\002\000\012\003\110\030\uffce\060\113" +
    "\061\112\001\002\000\004\030\126\001\002\000\016\003" +
    "\uffcb\020\115\021\120\030\uffcb\060\uffcb\061\uffcb\001\002" +
    "\000\014\003\uffcb\020\115\030\uffcb\060\uffcb\061\uffcb\001" +
    "\002\000\012\003\110\030\uffce\060\113\061\112\001\002" +
    "\000\014\003\uffcb\020\115\030\uffcb\060\uffcb\061\uffcb\001" +
    "\002\000\012\003\uffcc\030\uffcc\060\uffcc\061\uffcc\001\002" +
    "\000\004\030\uffd1\001\002\000\004\045\123\001\002\000" +
    "\012\003\110\030\uffce\060\113\061\112\001\002\000\004" +
    "\030\uffd0\001\002\000\014\003\uffcb\020\115\030\uffcb\060" +
    "\uffcb\061\uffcb\001\002\000\012\003\110\030\uffce\060\113" +
    "\061\112\001\002\000\004\030\uffcf\001\002\000\004\023" +
    "\127\001\002\000\026\003\uffd4\015\uffd4\032\uffd4\034\uffd4" +
    "\036\uffd4\040\uffd4\041\uffd4\043\uffd4\050\uffd4\061\uffd4\001" +
    "\002\000\004\030\uffcd\001\002\000\004\033\142\001\002" +
    "\000\004\022\133\001\002\000\010\046\134\053\136\061" +
    "\135\001\002\000\006\027\137\033\uffdc\001\002\000\004" +
    "\033\uffde\001\002\000\004\033\uffdf\001\002\000\004\056" +
    "\140\001\002\000\004\030\141\001\002\000\004\033\uffdd" +
    "\001\002\000\012\032\047\036\057\043\050\061\044\001" +
    "\002\000\004\034\144\001\002\000\004\023\145\001\002" +
    "\000\026\003\uffd2\015\uffd2\032\uffd2\034\uffd2\036\uffd2\040" +
    "\uffd2\041\uffd2\043\uffd2\050\uffd2\061\uffd2\001\002\000\012" +
    "\015\uffd6\034\uffd6\040\uffd6\041\uffd6\001\002\000\004\061" +
    "\150\001\002\000\004\035\151\001\002\000\010\003\036" +
    "\013\uffe5\014\037\001\002\000\004\013\uffe6\001\002\000" +
    "\004\055\154\001\002\000\004\023\155\001\002\000\026" +
    "\003\uffd3\015\uffd3\032\uffd3\034\uffd3\036\uffd3\040\uffd3\041" +
    "\uffd3\043\uffd3\050\uffd3\061\uffd3\001\002\000\004\013\uffe4" +
    "\001\002\000\004\005\231\001\002\000\010\017\uffc6\047" +
    "\163\051\161\001\002\000\004\061\217\001\002\000\004" +
    "\017\216\001\002\000\004\061\164\001\002\000\004\025" +
    "\165\001\002\000\006\024\166\027\170\001\002\000\006" +
    "\026\uffc4\027\170\001\002\000\004\021\205\001\002\000" +
    "\006\042\172\052\173\001\002\000\004\020\174\001\002" +
    "\000\006\020\uffc1\030\uffc1\001\002\000\006\020\uffc2\030" +
    "\uffc2\001\002\000\006\042\172\052\173\001\002\000\004" +
    "\020\176\001\002\000\006\042\172\052\173\001\002\000" +
    "\004\020\200\001\002\000\006\042\172\052\173\001\002" +
    "\000\004\020\202\001\002\000\006\042\172\052\173\001" +
    "\002\000\004\030\204\001\002\000\012\020\uffc3\021\uffc3" +
    "\026\uffc3\027\uffc3\001\002\000\010\017\uffc6\047\163\051" +
    "\161\001\002\000\004\017\uffc8\001\002\000\010\020\027" +
    "\026\uffee\027\uffee\001\002\000\004\026\211\001\002\000" +
    "\004\021\212\001\002\000\010\017\uffc6\047\163\051\161" +
    "\001\002\000\004\017\uffc7\001\002\000\006\026\uffc4\027" +
    "\170\001\002\000\004\026\uffc5\001\002\000\004\005\uffca" +
    "\001\002\000\004\025\220\001\002\000\014\017\uffbe\024" +
    "\221\047\uffbe\051\uffbe\061\223\001\002\000\004\061\025" +
    "\001\002\000\010\017\uffc6\047\163\051\161\001\002\000" +
    "\004\021\224\001\002\000\010\017\uffc0\047\uffc0\051\uffc0" +
    "\001\002\000\004\017\uffc9\001\002\000\004\026\227\001" +
    "\002\000\004\021\230\001\002\000\010\017\uffbf\047\uffbf" +
    "\051\uffbf\001\002\000\004\002\ufffd\001\002\000\004\016" +
    "\uffe7\001\002\000\004\061\254\001\002\000\004\007\253" +
    "\001\002\000\004\027\242\001\002\000\004\061\025\001" +
    "\002\000\004\021\240\001\002\000\012\007\ufff9\044\233" +
    "\046\235\053\236\001\002\000\004\007\ufff8\001\002\000" +
    "\004\056\243\001\002\000\004\030\244\001\002\000\004" +
    "\061\246\001\002\000\004\021\251\001\002\000\010\020" +
    "\027\021\ufff2\061\uffee\001\002\000\004\061\025\001\002" +
    "\000\004\021\ufff3\001\002\000\012\007\ufff9\044\233\046" +
    "\235\053\236\001\002\000\004\007\ufff7\001\002\000\004" +
    "\010\ufffc\001\002\000\004\025\255\001\002\000\004\024" +
    "\256\001\002\000\004\061\260\001\002\000\004\026\263" +
    "\001\002\000\010\020\027\026\ufff0\061\uffee\001\002\000" +
    "\004\061\260\001\002\000\004\026\ufff1\001\002\000\004" +
    "\021\264\001\002\000\012\007\ufff9\044\233\046\235\053" +
    "\236\001\002\000\004\007\ufff6\001\002\000\004\010\ufffa" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\006\002\006\005\005\001\001\000\004\007" +
    "\013\001\001\000\006\002\010\005\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\265\001\001\000\004\015\233\001\001" +
    "\000\004\011\014\001\001\000\004\013\033\001\001\000" +
    "\004\016\020\001\001\000\004\017\023\001\001\000\004" +
    "\016\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\025\001\001" +
    "\000\004\017\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\031\001\001\000\002\001\001\000\004" +
    "\013\231\001\001\000\004\014\156\001\001\000\004\010" +
    "\037\001\001\000\004\010\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\052\004\053\012\044\020\051\022\045\026\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\052\004\053\012\145\020\051\022\045\026\055\001\001" +
    "\000\004\025\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\052\004\053\012\102\020\051\022\045" +
    "\026\055\001\001\000\016\003\052\004\053\012\101\020" +
    "\051\022\045\026\055\001\001\000\016\003\052\004\053" +
    "\012\100\020\051\022\045\026\055\001\001\000\016\003" +
    "\052\004\053\012\077\020\051\022\045\026\055\001\001" +
    "\000\002\001\001\000\004\021\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\052\004\053\020\051\022\045" +
    "\026\070\001\001\000\002\001\001\000\014\003\052\004" +
    "\053\020\051\022\045\026\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\052\004\053\012\105\020\051\022\045\026\055\001\001" +
    "\000\002\001\001\000\004\024\110\001\001\000\004\024" +
    "\127\001\001\000\002\001\001\000\004\023\120\001\001" +
    "\000\004\023\113\001\001\000\004\024\116\001\001\000" +
    "\004\023\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\121\001\001\000\002\001" +
    "\001\000\004\023\123\001\001\000\004\024\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\052\004\053\020\051\022\045\026\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\166\001\001\000\006\031\207\032\206\001\001" +
    "\000\002\001\001\000\004\033\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\174" +
    "\001\001\000\002\001\001\000\004\033\176\001\001\000" +
    "\002\001\001\000\004\033\200\001\001\000\002\001\001" +
    "\000\004\033\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\205\001\001\000\002\001\001\000\004" +
    "\006\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\212\001\001\000\002\001\001\000\006\031\214" +
    "\032\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\221\001\001\000\004\017\225" +
    "\001\001\000\004\030\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\236\001\001\000\002\001\001\000\004\015" +
    "\240\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\244\001\001\000\002\001\001\000" +
    "\004\006\246\001\001\000\004\017\247\001\001\000\002" +
    "\001\001\000\004\015\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\256\001\001\000\002\001\001\000\004\006\260\001" +
    "\001\000\004\035\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\264\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



//TODO regler MEssage , rani deja bditha , derniere haja dertha c'est modifyit act li kodam message 
//TODO le principe li rani nkhdm fih c'est la réduction de toutes les instructions des scenario apres 
//je produit le code au moment de reduction.. //// Must be done avant le 13
   public static void main(String args[]) throws Exception {
      new parser(new Yylex(new InputStreamReader(System.in))).parse();
      //debut de génération de code
      //str à écrire dans le fichier a généré...
      String genc = "public class CMaisonUser extends CMaison {\n public CMaisonUser() {\n super();\n";
      for(Appareil app :listAppareilSymTable){
            switch(app.type){
            case NORMALTYPE : {
               String currType = getCurrType(app.typeMc);
               String[] splitType = currType.split(";");
               genc +=splitType[0]+" "+app.varName +" = new " +splitType[0]+"(\""+app.varName+"\","+splitType[1]+");\n"; 
               genc +="ma_liste_appareils.add("+app.varName+");\n";
               break;
            }
            case AUTRETYPE : {
               String currType = getCurrType(app.typeMc);
               genc +="CAutreAppareil "+app.varName +" = new CAutreAppareil(\""+app.varName+"\","+currType+");\n"; 
               genc +="ma_liste_appareils.add("+app.varName+");\n";
               break;
            }
            case INTERTYPE : {
               String currType = getCurrType(app.typeMc);
               genc +="CInterface "+app.varName +" = new CInterface(\""+app.varName+"\","+currType+");\n"; 
               genc +="ma_liste_interfaces.add("+app.varName+");\n";
               break;
            }
         }
      }
      
      // code pour générer les définitions ..
      genc+= "// Ensembles d'appareils\n";

      for(Appareil defApp :listAppareilDefSymTable){
         genc+="CEnsAppareil "+defApp.varName +" = new CEnsAppareil(\""+defApp.varName+"\");\n";
         for(String varName : defApp.defTypeListApp){
            genc+=defApp.varName+".addAppareil("+varName+");\n";
         }
         genc+="ma_liste_ens_appareils.add("+defApp.varName+");\n";
      }
      

       try{    
           FileWriter fw = new FileWriter(new File("genc.java"));  
           fw.write(genc);    
           fw.close();    
          }catch(Exception e){System.out.println(e);}    
          System.out.println("Success...");    
     

   }

   public static String getCurrType(String type){
      String currType ="";
         switch(type){
            case "eclairage":  currType = "CEclairage;TypeAppareil.ECLAIRAGE"; break;
            case "chauffage":  currType = "CChauffage;TypeAppareil.CHAUFFAGE"; break;
            case "fenetre":    currType = "CVoletFenetre;TypeAppareil.FENETRE"; break;
            case "volet":      currType = "CVoletFenetre;TypeAppareil.VOLET"; break;
            case "alarme":     currType = "CAlarme;TypeAppareil.ALARME"; break;
            case"tv":          currType = "TypeAppareil.AUTRE_APPAREIL_TV"; break;
            case "hifi":       currType = "TypeAppareil.AUTRE_APPAREIL_HIFI"; break;
            case "cafetiere":  currType = "TypeAppareil.AUTRE_APPAREIL_CAFE"; break;
            case "video_proj": currType = "TypeAppareil.AUTRE_APPAREIL_VP"; break;
            case "lave_linge": currType = "TypeAppareil.AUTRE_APPAREIL_LL"; break;
            case "lave_vaisselle": currType = "TypeAppareil.AUTRE_APPAREIL_LV"; break;
            case "seche_linge": currType = "TypeAppareil.AUTRE_APPAREIL_SL"; break;
            case "portail":     currType = "TypeAppareil.AUTRE_APPAREIL_PORTAIL"; break;
            case "interrupteur": currType ="TypeInterface.INTERRUPTEUR"; break;
            case "mobile": currType ="TypeInterface.MOBILE"; break;
            case "telephone": currType ="TypeInterface.TELEPHONE"; break;
            case "telecommande": currType ="TypeInterface.TELECOMMANDE"; break;
            case "tablette": currType ="TypeInterface.TABLETTE"; break;
            case "ordinateur": currType ="TypeInterface.ORDINATEUR"; break;
            default : currType =type;
         }

         return currType;
   }
   public void syntax_error(Symbol cur_token){
            System.out.println("ERR "+currentToken()+ " line = "+pline() + "column " + pcol());

   }
   public void report_fatal_error(String message , Object info){
      System.out.println("ERR "+currentToken()+ " line = "+pline() + "column " + pcol());
   }
   public void report_error(String message , Object info){
      System.out.println("ERR "+currentToken()+ " line = "+pline() + "column " + pcol());

   }
   public void unrecovered_syntax_error(Symbol cur_token){
      System.out.println("ERR "+currentToken()+ " line = "+pline() + "column " + pcol());
   }   
   public int pline(){
      return ((Yylex)getScanner()).getYyLine();
   }
   public int pcol(){
      return ((Yylex)getScanner()).getYyColumn();
   }
   public String currentToken(){
      return ((Yylex)getScanner()).getYyText();
   }
   static List<Appareil> listAppareilSymTable  = new ArrayList<Appareil>();
   static List<Appareil> listAppareilDefSymTable = new ArrayList<Appareil>();
   static List<String> identListDef = new ArrayList <String>();
   static List<String> identList = new ArrayList <String>();
   static List<String> identListAutreType = new ArrayList <String>();

   



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


   public void insertIntoSymTable(DeclAppType declType,String type,List<String> strList){
         for(int i =0;i<strList.size();i++){
               String id = strList.get(i);
               parser.listAppareilSymTable.add(new Appareil(declType,id,type));
               strList.remove(i);
               }
   }

   public String createScenarioActions(String id,String action,Boolean isLoop){
      String inst = "for(CAppareil appareil : this.l_appareils)\n ";
      String metToBeCalled ="";
      if(isLoop){
         metToBeCalled = "typeAppareil";
      }else{
         metToBeCalled = "getNomAppareil()";
      }
      String[] currentType = parser.getCurrType(action).split(";");
      if(currentType.length >  2){
         inst+= "appareil."+metToBeCalled+".equals(\""+id+"\")) appareil.appliquer("+currentType[1]+");\n";
      }else
         if(currentType[0].equals(action))
            inst+="appareil."+metToBeCalled+".equals(\""+id+"\"))"+action+";\n";
         else
            inst+="appareil."+metToBeCalled+".equals(\""+id+"\")) appareil.appliquer("+currentType[0]+");\n";

      return inst;
   }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // assocRes ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assocRes",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // assocRes ::= ACCOUV listeIdent ACCCFERM POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assocRes",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // assocRes ::= IDENT POINT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assocRes",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // var ::= UNDERSCORE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // var ::= ENTIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // nbr ::= PAROUV var VIRG var VIRG var VIRG var VIRG var PARFERM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nbr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // listeNbr ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeNbr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // listeNbr ::= nbr S listeNbr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeNbr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instrComm ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrComm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instrComm ::= PROGRAMMER IDENT EG ACCOUV listeNbr ACCCFERM POINT instrComm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrComm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instrComm ::= PROGRAMMER IDENT EG nbr POINT instrComm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrComm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instrComm ::= ASSOCIER IDENT EG assocRes instrComm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrComm",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declCommande ::= BALISEDEBDECLCOMMANDE instrComm BALISEFINDECLCOMMANDE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declCommande",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sep ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sep",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sep ::= VIRG sep 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sep",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // chaineMessage ::= error chaineMessage 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chaineMessage",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // chaineMessage ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chaineMessage",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // chaineMessage ::= IDENT POINT MCETAT sep chaineMessage 
            {
              Object RESULT =null;
		int valChleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valChright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valCh = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "Etat" +valCh;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chaineMessage",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // chaineMessage ::= IDENT sep chaineMessage 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valChleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valChright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valCh = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = val + valCh; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chaineMessage",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // chaineMessage ::= CHAINE sep chaineMessage 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valChleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valChright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valCh = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = val + valCh; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chaineMessage",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // boucle ::= POURTOUT condBoucle FAIRE instr FAIT PVIRG 
            {
              Object RESULT =null;
		int valCondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valCondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valCond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = createScenarioActions((String)valCond,(String)inst,true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boucle",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // act ::= IDENT POINT ACTION PVIRG 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int actionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int actionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String action = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = createScenarioActions(id,action,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("act",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // mess ::= MESSAGE PAROUV chaineMessage PARFERM PVIRG 
            {
              Object RESULT =null;
		int chaineValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int chaineValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object chaineVal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = "System.out.println(\"Affichage console :  \")"+chaineVal+";";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mess",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cond ::= PAROUV IDENT POINT MCETAT DOUBLEEG ETAT PARFERM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instr ::= condition instrScenario 
            {
              Object RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object condition = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = condition;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instr ::= boucle instrScenario 
            {
              Object RESULT =null;
		int boucleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int boucleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object boucle = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = boucle;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instr ::= mess instrScenario 
            {
              Object RESULT =null;
		int messleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int messright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mess = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = mess;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instr ::= act instrScenario 
            {
              Object RESULT =null;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = act; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condition ::= SI cond ALORS instr SINON instr FSI PVIRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condition ::= SI cond ALORS instr FSI PVIRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condBoucle ::= IDENT DP AUTREAPPAREIL 
            {
              Object RESULT =null;
		RESULT = "autre_appareil";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condBoucle",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condBoucle ::= IDENT DP AUTREAPPAREIL PAROUV TYPEAUTREAPP PARFERM 
            {
              Object RESULT =null;
		int typeAutreAppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeAutreAppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String typeAutreApp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = typeAutreApp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condBoucle",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condBoucle ::= IDENT DP IDENT 
            {
              Object RESULT =null;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = id2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condBoucle",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condBoucle ::= IDENT DP TYPEAPP 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = type;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condBoucle",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instrScenario ::= error instrScenario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrScenario",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instrScenario ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrScenario",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instrScenario ::= EXECUTERSCENARIO IDENT PVIRG instrScenario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrScenario",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instrScenario ::= instr 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrScenario",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listeScenar ::= error listeScenar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeScenar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listeScenar ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeScenar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // listeScenar ::= BALISEDECLSCENARIO IDENT PLUGR instrScenario BALISEFINSCENARIO IDENT PLUGR listeScenar 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 System.out.println(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeScenar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declScenarii ::= error declScenarii 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declScenarii",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declScenarii ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declScenarii",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declScenarii ::= BALISEDEBDECLSCENARII listeScenar BALISEFINDECLSCENARII 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declScenarii",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instrInterf ::= error instrInterf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrInterf",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instrInterf ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrInterf",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instrInterf ::= INTERFACE listeIdent POINT instrInterf 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		insertIntoSymTable(DeclAppType.INTERTYPE,type,parser.identList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrInterf",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declInterface ::= BALISEDEBDECLINTERF instrInterf BALISEFINDECLINTERF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declInterface",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // S ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // S ::= VIRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // listeIdentDef ::= IDENT 
            {
              Object RESULT =null;
		int idValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  parser.identListDef.add(idVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeIdentDef",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // listeIdentDef ::= IDENT S listeIdentDef 
            {
              Object RESULT =null;
		int idValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  parser.identListDef.add(idVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeIdentDef",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listeIdentAutreType ::= IDENT 
            {
              Object RESULT =null;
		int idValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.identListAutreType.add(idVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeIdentAutreType",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listeIdentAutreType ::= IDENT S listeIdent 
            {
              Object RESULT =null;
		int idValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.identListAutreType.add(idVal); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeIdentAutreType",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // listeIdent ::= IDENT 
            {
              List<Appareil> RESULT =null;
		int idValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		parser.identList.add(idVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeIdent",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // listeIdent ::= IDENT S listeIdent 
            {
              List<Appareil> RESULT =null;
		int idValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.identList.add(idVal); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeIdent",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrDecl ::= DEFINIR IDENT EG ACCOUV listeIdentDef ACCCFERM POINT instrDecl 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		  parser.listAppareilDefSymTable.add(new Appareil(DeclAppType.DEFTYPE,id,parser.identListDef));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrDecl ::= AUTREAPPAREIL PAROUV TYPEAUTREAPP PARFERM listeIdentAutreType POINT instrDecl 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 insertIntoSymTable(DeclAppType.AUTRETYPE,type,parser.identListAutreType);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrDecl ::= TYPEAPP listeIdent POINT instrDecl 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 insertIntoSymTable(DeclAppType.NORMALTYPE,type,parser.identList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrDecl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declApp ::= error declApp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declApp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declApp ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declApp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declApp ::= BALISEDEBDECLAPP instrDecl BALISEFINDECLAPP 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declApp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // liste ::= BALISEDEBPROG declApp declInterface declScenarii declCommande BALISEFINPROG 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog ::= error prog 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= liste 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

