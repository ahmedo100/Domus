
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Dec 13 11:43:27 CET 2019
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.io.FileWriter;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Dec 13 11:43:27 CET 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\002\004\000\002\005\010\000\002\007\005" +
    "\000\002\007\002\000\002\007\004\000\002\015\002\000" +
    "\002\015\006\000\002\015\011\000\002\015\012\000\002" +
    "\017\005\000\002\017\003\000\002\035\005\000\002\035" +
    "\003\000\002\034\005\000\002\034\003\000\002\006\003" +
    "\000\002\006\002\000\002\011\005\000\002\016\006\000" +
    "\002\016\002\000\002\016\004\000\002\013\005\000\002" +
    "\013\002\000\002\013\004\000\002\037\002\000\002\010" +
    "\013\000\002\010\002\000\002\010\004\000\002\012\003" +
    "\000\002\012\002\000\002\012\004\000\002\026\005\000" +
    "\002\026\005\000\002\026\010\000\002\026\005\000\002" +
    "\023\010\000\002\023\012\000\002\027\004\000\002\027" +
    "\004\000\002\027\004\000\002\027\004\000\002\027\006" +
    "\000\002\022\011\000\002\003\007\000\002\004\006\000" +
    "\002\021\010\000\002\025\005\000\002\025\005\000\002" +
    "\025\007\000\002\025\002\000\002\025\004\000\002\024" +
    "\004\000\002\024\002\000\002\040\002\000\002\014\006" +
    "\000\002\032\007\000\002\032\010\000\002\032\012\000" +
    "\002\032\002\000\002\030\005\000\002\030\003\000\002" +
    "\031\015\000\002\036\003\000\002\036\003\000\002\020" +
    "\004\000\002\020\006\000\002\020\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\010\002\uffff\003\005\004\004\001\002\000" +
    "\010\003\012\006\013\010\ufffb\001\002\000\010\002\uffff" +
    "\003\005\004\004\001\002\000\004\002\000\001\002\000" +
    "\004\002\010\001\002\000\004\002\001\001\002\000\004" +
    "\002\ufffe\001\002\000\010\003\012\006\013\010\ufffb\001" +
    "\002\000\012\007\ufff9\044\235\046\237\053\240\001\002" +
    "\000\004\010\016\001\002\000\010\003\033\012\035\016" +
    "\uffe8\001\002\000\010\003\020\011\uffeb\057\017\001\002" +
    "\000\004\061\025\001\002\000\010\003\020\011\uffeb\057" +
    "\017\001\002\000\004\011\022\001\002\000\010\003\uffed" +
    "\012\uffed\016\uffed\001\002\000\004\011\uffea\001\002\000" +
    "\004\021\031\001\002\000\012\020\027\021\ufff4\026\ufff4" +
    "\061\uffee\001\002\000\004\061\025\001\002\000\006\027" +
    "\uffef\061\uffef\001\002\000\006\021\ufff5\026\ufff5\001\002" +
    "\000\010\003\020\011\uffeb\057\017\001\002\000\004\011" +
    "\uffec\001\002\000\010\003\033\012\035\016\uffe8\001\002" +
    "\000\004\016\uffc9\001\002\000\010\003\036\013\uffe4\014" +
    "\037\001\002\000\010\003\036\013\uffe4\014\037\001\002" +
    "\000\004\061\042\001\002\000\004\013\041\001\002\000" +
    "\004\016\uffe9\001\002\000\004\035\uffe6\001\002\000\004" +
    "\035\044\001\002\000\020\003\056\015\uffe1\032\051\036" +
    "\060\043\050\050\052\061\045\001\002\000\004\021\154" +
    "\001\002\000\004\015\150\001\002\000\026\003\056\015" +
    "\uffe1\032\051\034\uffe1\036\060\040\uffe1\041\uffe1\043\050" +
    "\050\052\061\045\001\002\000\004\027\125\001\002\000" +
    "\004\061\111\001\002\000\004\061\105\001\002\000\026" +
    "\003\056\015\uffe1\032\051\034\uffe1\036\060\040\uffe1\041" +
    "\uffe1\043\050\050\052\061\045\001\002\000\026\003\056" +
    "\015\uffe1\032\051\034\uffe1\036\060\040\uffe1\041\uffe1\043" +
    "\050\050\052\061\045\001\002\000\026\003\056\015\uffe1" +
    "\032\051\034\uffe1\036\060\040\uffe1\041\uffe1\043\050\050" +
    "\052\061\045\001\002\000\026\003\056\015\uffe1\032\051" +
    "\034\uffe1\036\060\040\uffe1\041\uffe1\043\050\050\052\061" +
    "\045\001\002\000\012\015\uffe2\034\uffe2\040\uffe2\041\uffe2" +
    "\001\002\000\004\027\062\001\002\000\004\037\071\001" +
    "\002\000\004\061\063\001\002\000\004\021\064\001\002" +
    "\000\004\045\065\001\002\000\004\031\066\001\002\000" +
    "\004\054\067\001\002\000\004\030\070\001\002\000\004" +
    "\037\uffd4\001\002\000\014\032\051\036\060\043\050\050" +
    "\052\061\045\001\002\000\006\040\073\041\074\001\002" +
    "\000\014\032\051\036\060\043\050\050\052\061\045\001" +
    "\002\000\004\023\075\001\002\000\026\003\uffdb\015\uffdb" +
    "\032\uffdb\034\uffdb\036\uffdb\040\uffdb\041\uffdb\043\uffdb\050" +
    "\uffdb\061\uffdb\001\002\000\004\041\077\001\002\000\004" +
    "\023\100\001\002\000\026\003\uffda\015\uffda\032\uffda\034" +
    "\uffda\036\uffda\040\uffda\041\uffda\043\uffda\050\uffda\061\uffda" +
    "\001\002\000\012\015\uffe0\034\uffe0\040\uffe0\041\uffe0\001" +
    "\002\000\012\015\uffd9\034\uffd9\040\uffd9\041\uffd9\001\002" +
    "\000\012\015\uffd8\034\uffd8\040\uffd8\041\uffd8\001\002\000" +
    "\012\015\uffd7\034\uffd7\040\uffd7\041\uffd7\001\002\000\004" +
    "\023\106\001\002\000\026\003\056\015\uffe1\032\051\034" +
    "\uffe1\036\060\040\uffe1\041\uffe1\043\050\050\052\061\045" +
    "\001\002\000\012\015\uffd5\034\uffd5\040\uffd5\041\uffd5\001" +
    "\002\000\004\033\121\001\002\000\004\022\112\001\002" +
    "\000\010\046\113\053\115\061\114\001\002\000\006\027" +
    "\116\033\uffdc\001\002\000\004\033\uffde\001\002\000\004" +
    "\033\uffdf\001\002\000\004\056\117\001\002\000\004\030" +
    "\120\001\002\000\004\033\uffdd\001\002\000\014\032\051" +
    "\036\060\043\050\050\052\061\045\001\002\000\004\034" +
    "\123\001\002\000\004\023\124\001\002\000\026\003\uffd1" +
    "\015\uffd1\032\uffd1\034\uffd1\036\uffd1\040\uffd1\041\uffd1\043" +
    "\uffd1\050\uffd1\061\uffd1\001\002\000\012\003\126\030\uffcd" +
    "\060\131\061\127\001\002\000\012\003\126\030\uffcd\060" +
    "\131\061\127\001\002\000\016\003\uffca\020\133\021\140" +
    "\030\uffca\060\uffca\061\uffca\001\002\000\004\030\136\001" +
    "\002\000\014\003\uffca\020\133\030\uffca\060\uffca\061\uffca" +
    "\001\002\000\012\003\126\030\uffcd\060\131\061\127\001" +
    "\002\000\014\003\uffca\020\133\030\uffca\060\uffca\061\uffca" +
    "\001\002\000\012\003\uffcb\030\uffcb\060\uffcb\061\uffcb\001" +
    "\002\000\004\030\uffd0\001\002\000\004\023\137\001\002" +
    "\000\026\003\uffd3\015\uffd3\032\uffd3\034\uffd3\036\uffd3\040" +
    "\uffd3\041\uffd3\043\uffd3\050\uffd3\061\uffd3\001\002\000\004" +
    "\045\143\001\002\000\012\003\126\030\uffcd\060\131\061" +
    "\127\001\002\000\004\030\uffcf\001\002\000\014\003\uffca" +
    "\020\133\030\uffca\060\uffca\061\uffca\001\002\000\012\003" +
    "\126\030\uffcd\060\131\061\127\001\002\000\004\030\uffce" +
    "\001\002\000\004\030\uffcc\001\002\000\012\015\uffd6\034" +
    "\uffd6\040\uffd6\041\uffd6\001\002\000\004\061\151\001\002" +
    "\000\004\035\152\001\002\000\010\003\036\013\uffe4\014" +
    "\037\001\002\000\004\013\uffe5\001\002\000\004\055\155" +
    "\001\002\000\004\023\156\001\002\000\026\003\uffd2\015" +
    "\uffd2\032\uffd2\034\uffd2\036\uffd2\040\uffd2\041\uffd2\043\uffd2" +
    "\050\uffd2\061\uffd2\001\002\000\004\013\uffe3\001\002\000" +
    "\004\005\233\001\002\000\004\016\162\001\002\000\010" +
    "\017\uffc4\047\165\051\163\001\002\000\004\061\221\001" +
    "\002\000\004\017\220\001\002\000\004\061\166\001\002" +
    "\000\004\025\167\001\002\000\006\024\170\027\173\001" +
    "\002\000\004\027\173\001\002\000\012\020\027\021\uffc2" +
    "\026\uffc2\027\uffee\001\002\000\004\021\210\001\002\000" +
    "\006\042\175\052\176\001\002\000\004\020\177\001\002" +
    "\000\006\020\uffbf\030\uffbf\001\002\000\006\020\uffc0\030" +
    "\uffc0\001\002\000\006\042\175\052\176\001\002\000\004" +
    "\020\201\001\002\000\006\042\175\052\176\001\002\000" +
    "\004\020\203\001\002\000\006\042\175\052\176\001\002" +
    "\000\004\020\205\001\002\000\006\042\175\052\176\001" +
    "\002\000\004\030\207\001\002\000\012\020\uffc1\021\uffc1" +
    "\026\uffc1\027\uffc1\001\002\000\010\017\uffc4\047\165\051" +
    "\163\001\002\000\004\017\uffc6\001\002\000\004\027\173" +
    "\001\002\000\006\021\uffc3\026\uffc3\001\002\000\004\026" +
    "\215\001\002\000\004\021\216\001\002\000\010\017\uffc4" +
    "\047\165\051\163\001\002\000\004\017\uffc5\001\002\000" +
    "\004\005\uffc8\001\002\000\004\025\222\001\002\000\014" +
    "\017\uffbc\024\223\047\uffbc\051\uffbc\061\225\001\002\000" +
    "\004\061\025\001\002\000\010\017\uffc4\047\165\051\163" +
    "\001\002\000\004\021\226\001\002\000\010\017\uffbe\047" +
    "\uffbe\051\uffbe\001\002\000\004\017\uffc7\001\002\000\004" +
    "\026\231\001\002\000\004\021\232\001\002\000\010\017" +
    "\uffbd\047\uffbd\051\uffbd\001\002\000\004\002\ufffd\001\002" +
    "\000\004\016\uffe7\001\002\000\004\061\256\001\002\000" +
    "\004\007\255\001\002\000\004\027\244\001\002\000\004" +
    "\061\025\001\002\000\004\021\242\001\002\000\012\007" +
    "\ufff9\044\235\046\237\053\240\001\002\000\004\007\ufff8" +
    "\001\002\000\004\056\245\001\002\000\004\030\246\001" +
    "\002\000\004\061\250\001\002\000\004\021\253\001\002" +
    "\000\010\020\027\021\ufff2\061\uffee\001\002\000\004\061" +
    "\250\001\002\000\004\021\ufff3\001\002\000\012\007\ufff9" +
    "\044\235\046\237\053\240\001\002\000\004\007\ufff7\001" +
    "\002\000\004\010\ufffc\001\002\000\004\025\257\001\002" +
    "\000\004\024\260\001\002\000\004\061\262\001\002\000" +
    "\004\026\265\001\002\000\010\020\027\026\ufff0\061\uffee" +
    "\001\002\000\004\061\262\001\002\000\004\026\ufff1\001" +
    "\002\000\004\021\266\001\002\000\012\007\ufff9\044\235" +
    "\046\237\053\240\001\002\000\004\007\ufff6\001\002\000" +
    "\004\010\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\006\002\006\005\005\001\001\000\004\007" +
    "\013\001\001\000\006\002\010\005\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\267\001\001\000\004\015\235\001\001" +
    "\000\004\011\014\001\001\000\004\013\033\001\001\000" +
    "\004\016\020\001\001\000\004\017\023\001\001\000\004" +
    "\016\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\025\001\001" +
    "\000\004\017\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\031\001\001\000\002\001\001\000\004" +
    "\013\233\001\001\000\006\014\157\040\160\001\001\000" +
    "\004\010\037\001\001\000\004\010\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\042\001\001\000\002\001\001\000\016\003\053\004\054" +
    "\012\045\021\052\023\046\027\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\053\004\054\012\146" +
    "\021\052\023\046\027\056\001\001\000\002\001\001\000" +
    "\004\026\107\001\001\000\002\001\001\000\016\003\053" +
    "\004\054\012\103\021\052\023\046\027\056\001\001\000" +
    "\016\003\053\004\054\012\102\021\052\023\046\027\056" +
    "\001\001\000\016\003\053\004\054\012\101\021\052\023" +
    "\046\027\056\001\001\000\016\003\053\004\054\012\100" +
    "\021\052\023\046\027\056\001\001\000\002\001\001\000" +
    "\004\022\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\053\004\054\021\052\023\046\027\071\001\001\000" +
    "\002\001\001\000\014\003\053\004\054\021\052\023\046" +
    "\027\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\053\004\054\012\106" +
    "\021\052\023\046\027\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\053" +
    "\004\054\021\052\023\046\027\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\127" +
    "\001\001\000\004\025\145\001\001\000\004\024\140\001" +
    "\001\000\002\001\001\000\004\024\131\001\001\000\004" +
    "\025\134\001\001\000\004\024\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\141\001\001\000\002\001" +
    "\001\000\004\024\143\001\001\000\004\025\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\171\031\170\001\001\000\006\030\213\031\170\001" +
    "\001\000\004\006\211\001\001\000\002\001\001\000\004" +
    "\036\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\177\001\001\000\002\001\001" +
    "\000\004\036\201\001\001\000\002\001\001\000\004\036" +
    "\203\001\001\000\002\001\001\000\004\036\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\210\001" +
    "\001\000\002\001\001\000\006\030\212\031\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\223\001\001\000\004\017" +
    "\227\001\001\000\004\032\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\240\001\001\000\002\001\001\000\004" +
    "\015\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\246\001\001\000\002\001\001" +
    "\000\004\006\250\001\001\000\004\035\251\001\001\000" +
    "\002\001\001\000\004\015\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\260\001\001\000\002\001\001\000\004\006\262" +
    "\001\001\000\004\034\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\266\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



//TODO regler MEssage , rani deja bditha , derniere haja dertha c'est modifyit act li kodam message 
//TODO le principe li rani nkhdm fih c'est la réduction de toutes les instructions des scenario apres 
//je produit le code au moment de reduction.. //// Must be done avant le 13
   public static void main(String args[]) throws Exception {
      new parser(new Yylex(new InputStreamReader(System.in))).parse();
      //debut de génération de code
      //str à écrire dans le fichier a généré...
      String genc = "public class CMaisonUser extends CMaison {\n public CMaisonUser() {\n super();\n";
      String fich2 ="// HabitatSpecific.java\nimport java.util.ArrayList;\npublic class HabitatSpecific extends Habitat {\npublic HabitatSpecific(ArrayList<CAppareil> lapp, ArrayList<CEnsAppareil> lens, ArrayList<CScenario> lscen, ArrayList<CInterface> lint, ArrayList<CProgrammation> lprog)\n{\n	super(lapp,lens,lscen,lint,lprog);\n}\n";
      fich2+="public void execScenarioNum(int num){\n";
      fich2+="System.out.println( \"Execution du scenario \"+this.l_scenarios.get(num).getNomScenario()+\"... \");\n\n";
      fich2+="     switch(num) {\n";
      for(String str :parser.scenarioSymTable.keySet()){
         System.out.println("work");
            fich2+="case "+parser.scenarioId.get(str)+ ": \n";
            fich2+=parser.scenarioSymTable.get(str).replace("\\\"","\"")+"\n";
            fich2+="break;\n";
      }

      fich2+="default:\n }\n  } \n}";
      for(Appareil app :listAppareilSymTable){
            switch(app.type){
            case NORMALTYPE : {
               String currType = getCurrType(app.typeMc);
               String[] splitType = currType.split(";");
               genc +=splitType[0]+" "+app.varName +" = new " +splitType[0]+"(\""+app.varName+"\","+splitType[1]+");\n"; 
               genc +="ma_liste_appareils.add("+app.varName+");\n";
               break;
            }
            case AUTRETYPE : {
               String currType = getCurrType(app.typeMc);
               genc +="CAutreAppareil "+app.varName +" = new CAutreAppareil(\""+app.varName+"\","+currType+");\n"; 
               genc +="ma_liste_appareils.add("+app.varName+");\n";
               break;
            }
            case INTERTYPE : {
               String currType = getCurrType(app.typeMc);
               genc +="CInterface "+app.varName +" = new CInterface(\""+app.varName+"\","+currType+");\n"; 
               genc +="ma_liste_interfaces.add("+app.varName+");\n";
               break;
            }
         }
      }
      
      // code pour générer les définitions ..
      genc+= "// Ensembles d'appareils\n";

      for(Appareil defApp :listAppareilDefSymTable){
         genc+="CEnsAppareil "+defApp.varName +" = new CEnsAppareil(\""+defApp.varName+"\");\n";
         for(String varName : defApp.defTypeListApp){
            genc+=defApp.varName+".addAppareil("+varName+");\n";
         }
         genc+="ma_liste_ens_appareils.add("+defApp.varName+");\n";
      }
      
         genc+=scenValue;
         genc+=commValue;
         genc+="monHabitat = new HabitatSpecific(ma_liste_appareils,ma_liste_ens_appareils, ma_liste_scenarios,ma_liste_interfaces, ma_liste_programmations);";
         genc+="\n} \n }";
       try{    
           FileWriter fw = new FileWriter(new File("CMaisonUser.java"));  
           FileWriter fw2 = new FileWriter(new File("HabitatSpecific.java"));
           fw2.write(fich2);
           fw2.close();
           fw.write(genc);    
           fw.close();    
          }catch(Exception e){System.out.println(e);}    
          System.out.println("Success...");    
     

   }

   public static String getCurrType(String type){
      String currType ="";
         switch(type){
            case "eclairage":  currType = "CEclairage;TypeAppareil.ECLAIRAGE"; break;
            case "chauffage":  currType = "CChauffage;TypeAppareil.CHAUFFAGE"; break;
            case "fenetre":    currType = "CVoletFenetre;TypeAppareil.FENETRE"; break;
            case "volet":      currType = "CVoletFenetre;TypeAppareil.VOLET"; break;
            case "alarme":     currType = "CAlarme;TypeAppareil.ALARME"; break;
            case "tv":          currType = "TypeAppareil.AUTRE_APPAREIL_TV"; break;
            case "hifi":       currType = "TypeAppareil.AUTRE_APPAREIL_HIFI"; break;
            case "cafetiere":  currType = "TypeAppareil.AUTRE_APPAREIL_CAFE"; break;
            case "video_proj": currType = "TypeAppareil.AUTRE_APPAREIL_VP"; break;
            case "lave_linge": currType = "TypeAppareil.AUTRE_APPAREIL_LL"; break;
            case "lave_vaisselle": currType = "TypeAppareil.AUTRE_APPAREIL_LV"; break;
            case "seche_linge": currType = "TypeAppareil.AUTRE_APPAREIL_SL"; break;
            case "portail":     currType = "TypeAppareil.AUTRE_APPAREIL_PORTAIL"; break;
            case "interrupteur": currType ="TypeInterface.INTERRUPTEUR"; break;
            case "mobile": currType ="TypeInterface.MOBILE"; break;
            case "telephone": currType ="TypeInterface.TELEPHONE"; break;
            case "telecommande": currType ="TypeInterface.TELECOMMANDE"; break;
            case "tablette": currType ="TypeInterface.TABLETTE"; break;
            case "ordinateur": currType ="TypeInterface.ORDINATEUR"; break;
            default : currType =type;
         }

         return currType;
   }

   public static String getCurrentEtat(String etat){
      String currEtat ="";
      switch(etat){
         case "allume": currEtat ="TypeEtatAppareil.ALLUME"; break;
         case "eteint": currEtat ="TypeEtatAppareil.ETEINT"; break;
         case "demi"  :	currEtat ="TypeEtatAppareil.DEMI"; break;	 
         case "eco"   : currEtat ="TypeEtatAppareil.ECO"; break;
         case "ouvert": currEtat ="TypeEtatAppareil.OUVERT"; break;
         case "ferme" : currEtat ="TypeEtatAppareil.FERME"; break;
      }

      return currEtat;
   }

   public static String getCurrentAction(String action){
      String currAction ="";
      switch(action){
         case "allumer": currAction ="TypeActionAppareil.ALLUMER"; break;
         case "ouvrir": currAction ="TypeActionAppareil.ETEINDRE"; break;
         case "fermer"  :	currAction ="TypeActionAppareil.TAMISER"; break;	 
         case "eteindre"   : currAction ="TypeActionAppareil.ALLUMER_PARTIEL"; break;
         case "allumer_partiel": currAction ="TypeActionAppareil.ALLUMER_ECO"; break;
         case "tamiser" : currAction ="TypeActionAppareil.OUVRIR"; break;
         case "allumer_eco"   : currAction ="TypeActionAppareil.FERMER"; break;
         case "fermer_partiel": currAction ="TypeActionAppareil.OUVRIR_PARTIEL"; break;
         case "ouvrir_partiel" : currAction ="TypeActionAppareil.FERMER_PARTIEL"; break;
      }

      return currAction;
   }
   public void syntax_error(Symbol cur_token){
            System.out.println("ERR "+currentToken()+ " line = "+pline() + "column " + pcol());

   }
   public void report_fatal_error(String message , Object info){
      System.out.println("ERR "+currentToken()+ " line = "+pline() + "column " + pcol());
   }
   public void report_error(String message , Object info){
      System.out.println("ERR "+currentToken()+ " line = "+pline() + "column " + pcol());

   }
   public void unrecovered_syntax_error(Symbol cur_token){
      System.out.println("ERR "+currentToken()+ " line = "+pline() + "column " + pcol());
   }   
   public int pline(){
      return ((Yylex)getScanner()).getYyLine();
   }
   public int pcol(){
      return ((Yylex)getScanner()).getYyColumn();
   }
   public String currentToken(){
      return ((Yylex)getScanner()).getYyText();
   }
   static List<Appareil> listAppareilSymTable  = new ArrayList<Appareil>();
   static List<Appareil> listAppareilDefSymTable = new ArrayList<Appareil>();
   static List<String> identListDef = new ArrayList <String>();
   static List<String> identList = new ArrayList <String>();
   static List<String> identListAutreType = new ArrayList <String>();
   static Map<String,String> scenarioSymTable = new HashMap();
   static Map<String,Integer> scenarioId = new HashMap();
   static String scenValue ="";
   static String commValue ="";   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


   int scenarioCount = 0;
   public void insertIntoSymTable(DeclAppType declType,String type,List<String> strList){
         for(int i =0;i<strList.size();i++){
               String id = strList.get(i);
               parser.listAppareilSymTable.add(new Appareil(declType,id,type));
               strList.remove(i);
               }
   }

   public String createScenarioActions(String id,String action,boolean isLoop,boolean isCond){         
      String inst = "for(CAppareil appareil : this.l_appareils) ";
      String metToBeCalled ="";
      if(isLoop){
         metToBeCalled = "typeAppareil";
      }else{
         metToBeCalled = "getNomAppareil()";
      }
      if(isCond){
         inst+= " if (appareil.getNomAppareil().equals(\\\""+id+"\\\"))";
         String etat = parser.getCurrentEtat(action);
         inst+= "if (appareil.etatAppareil.equals("+etat+"))    ";
      }else {
         if(action.contains("CAppareil") || action.contains("System")){
            inst+=action;
         }else {
            if(isLoop){
               String[] currentType = parser.getCurrType(id).split(";");
               String type ="";
               if(currentType.length > 1)
                  type =currentType[1];
               else type= currentType[0];
                  inst+="if (appareil."+metToBeCalled+".equals("+type+")) appareil.appliquer("+parser.getCurrentAction(action)+");";
            }
            else
               inst+="if (appareil."+metToBeCalled+".equals(\\\""+id+"\\\")) appareil.appliquer("+parser.getCurrentAction(action)+");";
         }
      
      }
      
      return inst;
   }

   public String createScenario(String ident,String content){
      String scenarioContent ="String "+ident+"_contenu  = \""+content+"\";\n";
      String scenarioDecl = "CScenario "+ident+ "= new CScenario(\""+ident+"\","+ident+"_contenu);\nma_liste_scenarios.add("+ident+");\n";
      parser.scenarioSymTable.put(ident,content);
      return scenarioContent + scenarioDecl;
   }
   public String createExecute(Integer scenarioCount){
      return  "  this.execScenarioNum("+scenarioCount+"); ";
   }
   public String assocScenario(String id , List<String> list){
      String assoc="";
      for(String nomScenario : list )
         assoc += "    \n "+id+".addScenarioAssocie(\""+nomScenario+"\");\n";
      return assoc;
   }

   public String createProgramString(int nbProg,String nomScenario,List<Integer[]> listDate){
         String var = "p"+nbProg;
         String prog ="CProgrammation "+var+" = new CProgrammation(\""+nomScenario+"\");\n";
         int count =1;
         for(Integer[] date : listDate){
            String pdate = "d"+count;
            String d = "CDate "+var+pdate+" = new CDate(";
            String dateStr ="";
            for(int nb :date)
               dateStr+=nb+",";
            dateStr = dateStr.substring(0,dateStr.length()-1);
            d += dateStr+");\n";
            prog+= d;
            prog+=var+".addDate("+var+pdate+");\n";
         }

         prog+= "ma_liste_programmations("+var+");\n";
         return prog;
   }
   int nbProg =0;
   public boolean checkInSymTable(String id){
      boolean inSym = false;
      for(Appareil app :parser.listAppareilSymTable ){
         if(app.varName.equals(id)){
            inSym = true;
            break;
         }
      }
         return inSym || parser.identListDef.contains(id) || parser.identList.contains(id) ||  parser.identListAutreType.contains(id);
   }

   boolean isDeclPhase = true;

   public boolean checkDate(int year , int month , int day ,int heure , int minute){
      int yearLength = String.valueOf(year).length();      
      if ((yearLength == 4 || year == -1 ) && ((month>=1 && month < 12) || month == -1) && ((day > 0 && day <=31) || day == -1 ) && ((heure >= 1 && heure <= 23 ) || heure == -1) && ((minute >=0 && minute <= 59) || minute == -1)){
            return false;
      }
      return true;
   }

   boolean checkInSym(String id){
      boolean inSym = false;
      for(Appareil app :parser.listAppareilSymTable){
         if(app.varName.equals(id)){
            inSym = true;
            break;
         }
      }
      return inSym;
   }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assocRes ::= 
            {
              List<String> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assocRes",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // assocRes ::= ACCOUV listeIdent ACCCFERM POINT 
            {
              List<String> RESULT =null;
		int llleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int llright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> ll = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = ll;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assocRes",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // assocRes ::= IDENT POINT 
            {
              List<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		List<String> ll = new ArrayList(); ll.add(id); RESULT = ll;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assocRes",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // var ::= UNDERSCORE 
            {
              Integer RESULT =null;
		RESULT = new Integer(-1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // var ::= ENTIER 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Integer(val);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // nbr ::= PAROUV var VIRG var VIRG var VIRG var VIRG var PARFERM 
            {
              Integer[] RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Integer var1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Integer var2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int var3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int var3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer var3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int var4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int var4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer var4 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int var5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer var5 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(checkDate(var1,var2,var3,var4,var5)) throw new WrongDateFormatException("");   Integer[] nbArr = {var1,var2,var3,var4,var5}; RESULT=nbArr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nbr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // listeNbr ::= nbr 
            {
              List<Integer[]> RESULT =null;
		int nbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer[] nb = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		List<Integer[]> ll = new ArrayList<Integer[]>(); ll.add(nb); RESULT = ll; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeNbr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // listeNbr ::= nbr S listeNbr 
            {
              List<Integer[]> RESULT =null;
		int nbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer[] nb = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int llleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Integer[]> ll = (List<Integer[]>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ll.add(nb); RESULT = ll; System.out.println(ll);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeNbr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instrComm ::= 
            {
              Object RESULT =null;
		RESULT ="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrComm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instrComm ::= PROGRAMMER IDENT EG ACCOUV listeNbr ACCCFERM POINT instrComm 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Integer[]> nb = (List<Integer[]>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object next = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		String str= createProgramString(++nbProg,id,nb); RESULT = str+ next; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrComm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instrComm ::= PROGRAMMER IDENT EG listeNbr POINT instrComm 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Integer[]> nb = (List<Integer[]>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object next = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String str= createProgramString(++nbProg,id,nb); RESULT = str+ next; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrComm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instrComm ::= ASSOCIER IDENT EG assocRes instrComm 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<String> res = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int icleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int icright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= assocScenario(id,res)+ ic ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrComm",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declCommande ::= NT$1 BALISEDEBDECLCOMMANDE instrComm BALISEFINDECLCOMMANDE 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int icleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int icright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ic = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.commValue+=ic;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declCommande",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$1 ::= 
            {
              String RESULT =null;
isDeclPhase = false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sep ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sep",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sep ::= VIRG sep 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sep",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // chaineMessage ::= error chaineMessage 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("chaineMessage",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // chaineMessage ::= 
            {
              String RESULT =null;
		RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chaineMessage",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // chaineMessage ::= IDENT POINT MCETAT sep chaineMessage 
            {
              String RESULT =null;
		int valChleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valChright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valCh = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "Etat"+valCh;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chaineMessage",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // chaineMessage ::= IDENT sep chaineMessage 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valChleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valChright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valCh = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = val+" "+valCh; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chaineMessage",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // chaineMessage ::= CHAINE sep chaineMessage 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valChleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valChright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valCh = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = val+" "+valCh; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chaineMessage",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // boucle ::= POURTOUT condBoucle FAIRE instr FAIT PVIRG 
            {
              String RESULT =null;
		int valCondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valCondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String valCond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String inst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = createScenarioActions((String)valCond,(String)inst,true,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boucle",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // act ::= IDENT POINT ACTION PVIRG 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int actionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int actionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String action = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = createScenarioActions(id,action,false,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("act",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // mess ::= MESSAGE PAROUV chaineMessage PARFERM PVIRG 
            {
              Object RESULT =null;
		int chaineValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int chaineValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String chaineVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 chaineVal = ((String)(chaineVal)).replace("\"",""); RESULT = "System.out.println(\\\"Affichage console :"+chaineVal+" \\\");";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mess",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cond ::= PAROUV IDENT POINT MCETAT DOUBLEEG ETAT PARFERM 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String et = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = id+";"+et;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instr ::= EXECUTERSCENARIO IDENT PVIRG instrScenario 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ins = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = createExecute(parser.scenarioId.get(id)) +ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instr ::= condition instrScenario 
            {
              String RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String condition = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String is = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = condition + is;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instr ::= boucle instrScenario 
            {
              String RESULT =null;
		int boucleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int boucleright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String boucle = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String is = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = boucle + is;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instr ::= mess instrScenario 
            {
              String RESULT =null;
		int messleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int messright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mess = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String is = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mess+is;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instr ::= act instrScenario 
            {
              String RESULT =null;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String is = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = act+ is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condition ::= SI cond ALORS instr SINON instr FSI PVIRG 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 String[] tmp = ((String)(val)).split(";"); RESULT = createScenarioActions(tmp[0],tmp[1],false,true) + "{"+i1+"}"+"else{"+i2+"}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condition ::= SI cond ALORS instr FSI PVIRG 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 String[] tmp = ((String)(val)).split(";"); RESULT = createScenarioActions(tmp[0],tmp[1],false,true)+"{"+i1+"}"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condBoucle ::= IDENT DP AUTREAPPAREIL 
            {
              String RESULT =null;
		RESULT = "autre_appareil";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condBoucle",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condBoucle ::= IDENT DP AUTREAPPAREIL PAROUV TYPEAUTREAPP PARFERM 
            {
              String RESULT =null;
		int typeAutreAppleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeAutreAppright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String typeAutreApp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = typeAutreApp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condBoucle",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condBoucle ::= IDENT DP IDENT 
            {
              String RESULT =null;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = id2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condBoucle",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condBoucle ::= IDENT DP TYPEAPP 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = type;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condBoucle",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instrScenario ::= error instrScenario 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrScenario",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instrScenario ::= 
            {
              String RESULT =null;
		RESULT ="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrScenario",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instrScenario ::= instr 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrScenario",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // listeScenar ::= error listeScenar 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeScenar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listeScenar ::= 
            {
              String RESULT =null;
		 RESULT ="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeScenar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listeScenar ::= BALISEDECLSCENARIO IDENT NT$0 PLUGR instrScenario BALISEFINSCENARIO IDENT PLUGR listeScenar 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		  parser.scenValue+=createScenario(id,(String)val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeScenar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$0 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parser.scenarioId.put(id,parser.scenarioId.size());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declScenarii ::= error declScenarii 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declScenarii",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declScenarii ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declScenarii",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declScenarii ::= BALISEDEBDECLSCENARII listeScenar BALISEFINDECLSCENARII 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declScenarii",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instrInterf ::= error instrInterf 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrInterf",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instrInterf ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrInterf",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instrInterf ::= INTERFACE listeIdent POINT instrInterf 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		insertIntoSymTable(DeclAppType.INTERTYPE,type,parser.identList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrInterf",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declInterface ::= BALISEDEBDECLINTERF instrInterf BALISEFINDECLINTERF 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declInterface",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // S ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // S ::= VIRG 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // listeIdentDef ::= IDENT 
            {
              Object RESULT =null;
		int idValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  parser.identListDef.add(idVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeIdentDef",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // listeIdentDef ::= IDENT S listeIdentDef 
            {
              Object RESULT =null;
		int idValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   parser.identListDef.add(idVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeIdentDef",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listeIdentAutreType ::= IDENT 
            {
              Object RESULT =null;
		int idValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(isDeclPhase && checkInSymTable(idVal)) throw new VariableAlreadyDeclaredException(idVal); parser.identListAutreType.add(idVal);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeIdentAutreType",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listeIdentAutreType ::= IDENT S listeIdentAutreType 
            {
              Object RESULT =null;
		int idValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(isDeclPhase &&checkInSymTable(idVal)) throw new VariableAlreadyDeclaredException(idVal); parser.identListAutreType.add(idVal); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeIdentAutreType",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // listeIdent ::= IDENT 
            {
              List<String> RESULT =null;
		int idValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idValright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(isDeclPhase && checkInSymTable(idVal)) throw new VariableAlreadyDeclaredException(idVal); parser.identList.add(idVal); List<String> ll = new ArrayList(); ll.add(idVal); RESULT = ll;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeIdent",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // listeIdent ::= IDENT S listeIdent 
            {
              List<String> RESULT =null;
		int idValleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idValright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idVal = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<String> l = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(isDeclPhase &&checkInSymTable(idVal)) throw new VariableAlreadyDeclaredException(idVal); parser.identList.add(idVal); l.add(idVal); RESULT =l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listeIdent",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrDecl ::= DEFINIR IDENT EG ACCOUV listeIdentDef ACCCFERM POINT instrDecl 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		  parser.listAppareilDefSymTable.add(new Appareil(DeclAppType.DEFTYPE,id,parser.identListDef));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrDecl ::= AUTREAPPAREIL PAROUV TYPEAUTREAPP PARFERM listeIdentAutreType POINT instrDecl 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		  insertIntoSymTable(DeclAppType.AUTRETYPE,type,parser.identListAutreType);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrDecl ::= TYPEAPP listeIdent POINT instrDecl 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 insertIntoSymTable(DeclAppType.NORMALTYPE,type,parser.identList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrDecl ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declApp ::= error declApp 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declApp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declApp ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declApp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declApp ::= BALISEDEBDECLAPP instrDecl BALISEFINDECLAPP 
            {
              String RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declApp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // liste ::= BALISEDEBPROG declApp declInterface declScenarii declCommande BALISEFINPROG 
            {
              Object RESULT =null;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("liste",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog ::= error prog 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= liste 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

