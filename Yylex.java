/* The following code was generated by JFlex 1.6.1 */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexer.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\67\1\30\1\70\1\70\1\70\22\0\1\67\1\0\1\27"+
    "\5\0\1\36\1\37\2\0\1\31\1\0\1\32\1\20\12\2\1\33"+
    "\1\34\1\3\1\35\1\17\2\0\1\10\1\1\1\21\1\14\1\12"+
    "\1\26\1\7\1\1\1\24\2\1\1\22\1\11\1\25\1\6\1\4"+
    "\1\1\1\5\1\16\1\23\1\15\5\1\4\0\1\13\1\0\1\50"+
    "\1\66\1\62\1\60\1\52\1\47\1\57\1\63\1\51\1\65\1\1"+
    "\1\54\1\56\1\55\1\43\1\42\1\1\1\45\1\53\1\46\1\44"+
    "\1\64\1\1\1\61\2\1\1\40\1\0\1\41\7\0\1\70\u1fa2\0"+
    "\1\70\1\70\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\16\2\1\21\6\0\1\22\6\2"+
    "\1\23\12\2\1\24\12\2\6\0\1\6\1\25\13\2"+
    "\1\26\11\2\1\27\15\2\6\0\12\2\1\30\10\2"+
    "\1\31\15\2\6\0\12\2\1\32\1\27\3\2\1\33"+
    "\6\2\1\34\7\2\1\35\1\2\6\0\3\2\1\36"+
    "\7\2\1\27\7\2\1\37\4\2\6\0\4\2\1\36"+
    "\4\2\1\36\6\2\1\40\1\41\2\2\6\0\1\42"+
    "\5\2\1\43\6\2\2\0\1\44\3\0\11\2\4\0"+
    "\1\45\1\46\6\2\4\0\4\2\4\0\4\2\4\0"+
    "\3\2\7\0\1\47\1\2\12\0\1\2\12\0\1\2"+
    "\1\50\11\0\1\51\4\0\1\52\35\0\1\53\6\0"+
    "\1\54\1\55\2\0\1\56\2\0\1\57\1\60\1\61"+
    "\1\0\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[409];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\71\0\71\0\u011d"+
    "\0\u0156\0\71\0\71\0\71\0\71\0\71\0\u018f\0\71"+
    "\0\71\0\71\0\71\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac"+
    "\0\u02e5\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474"+
    "\0\u04ad\0\71\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603"+
    "\0\71\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\162"+
    "\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921"+
    "\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9"+
    "\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1"+
    "\0\u0cea\0\u0d23\0\u0d5c\0\u05ca\0\u0603\0\u0d95\0\u0dce\0\u0e07"+
    "\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf"+
    "\0\162\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e"+
    "\0\u1197\0\u11d0\0\162\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed"+
    "\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5"+
    "\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d"+
    "\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845"+
    "\0\162\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4"+
    "\0\u1a0d\0\162\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63"+
    "\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b"+
    "\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3"+
    "\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\162"+
    "\0\u1f2c\0\u20bb\0\u20f4\0\u212d\0\162\0\u2166\0\u219f\0\u21d8"+
    "\0\u2211\0\u224a\0\u2283\0\162\0\u22bc\0\u22f5\0\u232e\0\u2367"+
    "\0\u23a0\0\u23d9\0\u2412\0\162\0\u244b\0\u2484\0\u24bd\0\u24f6"+
    "\0\u252f\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be"+
    "\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886"+
    "\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc\0\162\0\u2a15"+
    "\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd"+
    "\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\162\0\u2d33\0\u2d6c"+
    "\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\u2f34"+
    "\0\u2f6d\0\162\0\162\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a"+
    "\0\u30c3\0\u30fc\0\u3135\0\162\0\u316e\0\u31a7\0\u31e0\0\u3219"+
    "\0\u3252\0\162\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u336f\0\u33a8"+
    "\0\u33e1\0\u341a\0\71\0\u3453\0\u348c\0\u34c5\0\u34fe\0\u3537"+
    "\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654\0\u368d\0\u36c6\0\u36ff"+
    "\0\u3738\0\u3771\0\u37aa\0\71\0\162\0\u37e3\0\u381c\0\u3855"+
    "\0\u388e\0\u38c7\0\u3900\0\u3939\0\u3972\0\u39ab\0\u39e4\0\u3a1d"+
    "\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a\0\u3b73\0\u3bac\0\u3be5"+
    "\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b\0\u3d74\0\u3dad"+
    "\0\u3de6\0\u3e1f\0\u3e58\0\u3e91\0\u3eca\0\u3f03\0\u3f3c\0\u3f75"+
    "\0\u3fae\0\162\0\u3fe7\0\u4020\0\u4059\0\u4092\0\u40cb\0\u4104"+
    "\0\u413d\0\u4176\0\u41af\0\u41e8\0\u4221\0\u425a\0\u4293\0\u42cc"+
    "\0\u4305\0\u433e\0\u4377\0\u43b0\0\u43e9\0\u4422\0\u445b\0\u4494"+
    "\0\u44cd\0\71\0\u4506\0\u453f\0\u4578\0\u45b1\0\u45ea\0\u4623"+
    "\0\u465c\0\u4695\0\u46ce\0\162\0\u4707\0\u4740\0\u4779\0\u47b2"+
    "\0\71\0\u47eb\0\u4824\0\u485d\0\u4896\0\u48cf\0\u4908\0\u4941"+
    "\0\u497a\0\u49b3\0\u49ec\0\u4a25\0\u4a5e\0\u4a97\0\u4ad0\0\u4b09"+
    "\0\u4b42\0\u4b7b\0\u4bb4\0\u4bed\0\u4c26\0\u4c5f\0\u4c98\0\u4cd1"+
    "\0\u4d0a\0\u4d43\0\u4d7c\0\u4db5\0\u4dee\0\u4e27\0\71\0\u4e60"+
    "\0\u4e99\0\u4ed2\0\u4f0b\0\u4f44\0\u4f7d\0\71\0\71\0\u4fb6"+
    "\0\u4fef\0\71\0\u5028\0\u5061\0\71\0\71\0\71\0\u509a"+
    "\0\71";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[409];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\7\3\1\6\3\3\1\7"+
    "\1\10\6\3\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\3"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\3"+
    "\1\35\1\3\1\36\1\3\1\37\1\40\1\41\2\3"+
    "\1\42\73\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\25\3\4\0\1\4\72\0\1\43\7\0\1\44\1\0"+
    "\1\45\1\0\1\46\70\0\1\47\50\0\30\50\1\0"+
    "\40\50\35\0\1\51\34\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\1\3\1\52\1\3\1\53\21\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\2\3\1\54"+
    "\1\55\21\3\3\0\2\3\1\0\13\3\2\0\6\3"+
    "\13\0\6\3\1\56\1\3\1\57\11\3\1\60\2\3"+
    "\3\0\2\3\1\0\13\3\2\0\6\3\13\0\6\3"+
    "\1\61\1\3\1\62\1\63\13\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\2\3\1\64\6\3\1\65"+
    "\1\66\12\3\3\0\2\3\1\0\13\3\2\0\6\3"+
    "\13\0\13\3\1\67\11\3\3\0\2\3\1\0\13\3"+
    "\2\0\6\3\13\0\4\3\1\70\12\3\1\71\1\72"+
    "\4\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\7\3\1\73\1\74\14\3\3\0\2\3\1\0\13\3"+
    "\2\0\6\3\13\0\6\3\1\75\16\3\3\0\2\3"+
    "\1\0\13\3\2\0\6\3\13\0\1\3\1\76\6\3"+
    "\1\77\14\3\3\0\2\3\1\0\13\3\2\0\6\3"+
    "\13\0\10\3\1\100\14\3\3\0\2\3\1\0\13\3"+
    "\2\0\6\3\13\0\6\3\1\101\12\3\1\102\3\3"+
    "\3\0\2\3\1\0\13\3\2\0\6\3\13\0\7\3"+
    "\1\103\15\3\3\0\2\3\1\0\13\3\2\0\6\3"+
    "\13\0\1\3\1\104\5\3\1\105\15\3\7\0\1\106"+
    "\75\0\1\107\77\0\1\110\53\0\1\111\7\0\1\112"+
    "\1\0\1\113\52\0\30\114\1\0\40\114\27\50\1\115"+
    "\1\0\40\50\1\0\2\3\1\0\13\3\2\0\6\3"+
    "\13\0\2\3\1\116\1\117\21\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\1\3\1\120\23\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\22\3\1\121"+
    "\2\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\16\3\1\122\6\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\14\3\1\123\7\3\1\124\3\0\2\3"+
    "\1\0\13\3\2\0\6\3\13\0\12\3\1\125\12\3"+
    "\3\0\2\3\1\0\13\3\2\0\6\3\13\0\7\3"+
    "\1\126\15\3\3\0\2\3\1\0\13\3\2\0\6\3"+
    "\13\0\3\3\1\127\7\3\1\130\11\3\3\0\2\3"+
    "\1\0\13\3\2\0\6\3\13\0\7\3\1\131\15\3"+
    "\3\0\2\3\1\0\13\3\2\0\6\3\13\0\4\3"+
    "\1\132\20\3\3\0\2\3\1\0\13\3\2\0\6\3"+
    "\13\0\11\3\1\133\13\3\3\0\2\3\1\0\13\3"+
    "\2\0\6\3\13\0\1\3\1\134\4\3\1\135\3\3"+
    "\1\136\12\3\3\0\2\3\1\0\13\3\2\0\6\3"+
    "\13\0\4\3\1\137\20\3\3\0\2\3\1\0\13\3"+
    "\2\0\6\3\13\0\6\3\1\140\1\3\1\141\14\3"+
    "\3\0\2\3\1\0\13\3\2\0\6\3\13\0\10\3"+
    "\1\142\14\3\3\0\2\3\1\0\13\3\2\0\6\3"+
    "\13\0\1\3\1\143\10\3\1\144\12\3\3\0\2\3"+
    "\1\0\13\3\2\0\6\3\13\0\13\3\1\145\11\3"+
    "\3\0\2\3\1\0\13\3\2\0\6\3\13\0\20\3"+
    "\1\146\4\3\3\0\2\3\1\0\13\3\2\0\6\3"+
    "\13\0\22\3\1\147\2\3\3\0\2\3\1\0\13\3"+
    "\2\0\6\3\13\0\24\3\1\150\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\11\3\1\151\13\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\5\3\1\152"+
    "\6\3\1\153\10\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\5\3\1\154\17\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\6\3\1\155\16\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\5\3\1\156"+
    "\17\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\12\3\1\157\12\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\16\3\1\160\6\3\10\0\1\161\103\0"+
    "\1\162\61\0\1\163\63\0\1\164\75\0\1\165\77\0"+
    "\1\166\50\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\3\3\1\167\21\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\4\3\1\170\20\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\15\3\1\171\7\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\3\3\1\172"+
    "\4\3\1\173\14\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\7\3\1\174\15\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\7\3\1\175\15\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\12\3\1\176"+
    "\12\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\10\3\1\177\14\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\3\3\1\200\1\201\20\3\3\0\2\3"+
    "\1\0\13\3\2\0\6\3\13\0\14\3\1\202\10\3"+
    "\3\0\2\3\1\0\13\3\2\0\6\3\13\0\10\3"+
    "\1\203\14\3\3\0\2\3\1\0\13\3\2\0\6\3"+
    "\13\0\3\3\1\204\21\3\3\0\2\3\1\0\13\3"+
    "\2\0\6\3\13\0\1\3\1\205\23\3\3\0\2\3"+
    "\1\0\13\3\2\0\6\3\13\0\3\3\1\206\21\3"+
    "\3\0\2\3\1\0\13\3\2\0\6\3\13\0\3\3"+
    "\1\207\21\3\3\0\2\3\1\0\13\3\2\0\6\3"+
    "\13\0\2\3\1\210\22\3\3\0\2\3\1\0\13\3"+
    "\2\0\6\3\13\0\10\3\1\211\14\3\3\0\2\3"+
    "\1\0\13\3\2\0\6\3\13\0\4\3\1\212\20\3"+
    "\3\0\2\3\1\0\13\3\2\0\6\3\13\0\7\3"+
    "\1\213\15\3\3\0\2\3\1\0\13\3\2\0\6\3"+
    "\13\0\20\3\1\214\4\3\3\0\2\3\1\0\13\3"+
    "\2\0\6\3\13\0\6\3\1\215\16\3\3\0\2\3"+
    "\1\0\13\3\2\0\6\3\13\0\1\3\1\216\23\3"+
    "\3\0\2\3\1\0\13\3\2\0\6\3\13\0\21\3"+
    "\1\217\3\3\3\0\2\3\1\0\13\3\2\0\6\3"+
    "\13\0\10\3\1\220\14\3\3\0\2\3\1\0\13\3"+
    "\2\0\6\3\13\0\7\3\1\221\15\3\3\0\2\3"+
    "\1\0\13\3\2\0\6\3\13\0\11\3\1\222\13\3"+
    "\3\0\2\3\1\0\13\3\2\0\6\3\13\0\7\3"+
    "\1\223\15\3\3\0\2\3\1\0\13\3\2\0\6\3"+
    "\13\0\7\3\1\143\15\3\3\0\2\3\1\0\13\3"+
    "\2\0\6\3\13\0\10\3\1\224\14\3\3\0\2\3"+
    "\1\0\13\3\2\0\6\3\13\0\2\3\1\225\22\3"+
    "\3\0\2\3\1\0\13\3\2\0\6\3\13\0\7\3"+
    "\1\60\15\3\3\0\2\3\1\0\13\3\2\0\6\3"+
    "\13\0\10\3\1\226\14\3\3\0\2\3\1\0\13\3"+
    "\2\0\6\3\13\0\10\3\1\227\14\3\11\0\1\230"+
    "\103\0\1\231\73\0\1\232\51\0\1\233\103\0\1\234"+
    "\61\0\1\235\57\0\2\3\1\0\13\3\2\0\6\3"+
    "\13\0\4\3\1\236\20\3\3\0\2\3\1\0\13\3"+
    "\2\0\6\3\13\0\6\3\1\237\16\3\3\0\2\3"+
    "\1\0\13\3\2\0\6\3\13\0\3\3\1\240\21\3"+
    "\3\0\2\3\1\0\13\3\2\0\6\3\13\0\7\3"+
    "\1\241\15\3\3\0\2\3\1\0\13\3\2\0\6\3"+
    "\13\0\3\3\1\242\21\3\3\0\2\3\1\0\13\3"+
    "\2\0\6\3\13\0\13\3\1\243\11\3\3\0\2\3"+
    "\1\0\13\3\2\0\6\3\13\0\11\3\1\244\13\3"+
    "\3\0\2\3\1\0\13\3\2\0\6\3\13\0\10\3"+
    "\1\245\14\3\3\0\2\3\1\0\13\3\2\0\6\3"+
    "\13\0\1\246\17\3\1\247\4\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\10\3\1\250\14\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\10\3\1\251"+
    "\14\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\4\3\1\252\20\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\10\3\1\253\14\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\20\3\1\254\4\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\11\3\1\255"+
    "\13\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\14\3\1\256\10\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\14\3\1\257\10\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\3\3\1\260\21\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\13\3\1\261"+
    "\11\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\2\3\1\262\22\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\7\3\1\263\15\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\13\3\1\264\11\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\10\3\1\265"+
    "\14\3\3\0\2\3\1\0\7\3\1\266\3\3\2\0"+
    "\6\3\13\0\25\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\12\3\1\267\12\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\6\3\1\270\16\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\13\3\1\271"+
    "\11\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\4\3\1\272\20\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\5\3\1\273\17\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\4\3\1\274\20\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\1\3\1\275"+
    "\23\3\7\0\1\276\73\0\1\277\70\0\1\300\67\0"+
    "\1\301\103\0\1\302\73\0\1\303\44\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\1\3\1\304\23\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\7\3\1\305"+
    "\15\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\6\3\1\306\16\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\3\3\1\307\21\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\4\3\1\143\20\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\6\3\1\310"+
    "\16\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\10\3\1\311\14\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\4\3\1\312\20\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\21\3\1\313\3\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\1\3\1\314"+
    "\23\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\3\3\1\256\21\3\3\0\2\3\1\0\7\3\1\315"+
    "\3\3\2\0\6\3\13\0\25\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\7\3\1\316\15\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\10\3\1\274"+
    "\14\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\10\3\1\317\14\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\3\3\1\320\21\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\4\3\1\143\11\3\1\321"+
    "\6\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\4\3\1\322\20\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\3\3\1\323\21\3\3\0\2\3\1\0"+
    "\7\3\1\324\3\3\2\0\6\3\13\0\25\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\12\3\1\325"+
    "\7\3\1\326\2\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\10\3\1\327\14\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\15\3\1\330\7\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\7\3\1\331"+
    "\15\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\7\3\1\332\15\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\5\3\1\323\17\3\3\0\2\3\1\0"+
    "\7\3\1\333\3\3\2\0\6\3\13\0\25\3\12\0"+
    "\1\334\65\0\1\335\70\0\1\336\70\0\1\337\73\0"+
    "\1\340\70\0\1\341\61\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\2\3\1\342\22\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\12\3\1\60\12\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\14\3\1\343"+
    "\10\3\3\0\2\3\1\0\7\3\1\344\3\3\2\0"+
    "\6\3\13\0\25\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\4\3\1\345\20\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\3\3\1\346\21\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\4\3\1\267"+
    "\20\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\1\3\1\347\23\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\14\3\1\350\10\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\6\3\1\351\16\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\10\3\1\352"+
    "\14\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\3\3\1\353\21\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\2\3\1\354\22\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\3\3\1\355\21\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\10\3\1\356"+
    "\14\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\6\3\1\357\16\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\12\3\1\325\12\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\7\3\1\360\15\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\6\3\1\361"+
    "\16\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\10\3\1\362\14\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\3\3\1\363\21\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\10\3\1\364\14\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\1\365\24\3"+
    "\13\0\1\366\67\0\1\367\104\0\1\370\54\0\1\371"+
    "\65\0\1\372\70\0\1\373\64\0\2\3\1\0\13\3"+
    "\2\0\6\3\13\0\4\3\1\374\20\3\3\0\2\3"+
    "\1\0\13\3\2\0\6\3\13\0\14\3\1\375\10\3"+
    "\3\0\2\3\1\0\13\3\2\0\6\3\13\0\1\376"+
    "\24\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\10\3\1\377\14\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\13\3\1\267\11\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\14\3\1\u0100\10\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\1\u0101\24\3"+
    "\3\0\2\3\1\0\13\3\2\0\6\3\13\0\3\3"+
    "\1\u0102\21\3\3\0\2\3\1\0\7\3\1\u0103\3\3"+
    "\2\0\6\3\13\0\25\3\3\0\2\3\1\0\13\3"+
    "\2\0\6\3\13\0\1\310\24\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\10\3\1\346\14\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\3\3\1\u0104"+
    "\21\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\15\3\1\256\7\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\13\3\1\u0105\11\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\7\3\1\u0106\15\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\3\3\1\u0107"+
    "\21\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\3\3\1\u0108\21\3\13\0\1\u0109\102\0\1\u010a\53\0"+
    "\1\u010b\73\0\1\u010c\67\0\1\u010d\104\0\1\u010e\45\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\10\3\1\u010f"+
    "\14\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\6\3\1\u0110\16\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\2\3\1\u0111\22\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\6\3\1\u0112\16\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\1\u0113\24\3"+
    "\3\0\2\3\1\0\13\3\2\0\6\3\13\0\1\376"+
    "\7\3\1\u0114\14\3\3\0\2\3\1\0\7\3\1\u0115"+
    "\3\3\2\0\6\3\13\0\25\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\15\3\1\u0107\7\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\11\3\1\u0116"+
    "\13\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\10\3\1\60\14\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\1\3\1\u0117\23\3\14\0\1\u0118\102\0"+
    "\1\u0119\55\0\1\u011a\102\0\1\u011b\53\0\1\u011c\63\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\3\3\1\u011d"+
    "\21\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\3\3\1\u011e\21\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\3\3\1\327\21\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\13\3\1\u011f\11\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\6\3\1\u0120"+
    "\16\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\20\3\1\u0121\4\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\11\3\1\u0122\13\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\11\3\1\u0123\13\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\23\3\1\60"+
    "\1\3\15\0\1\u0124\63\0\1\u0125\74\0\1\u0126\102\0"+
    "\1\u0127\45\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\4\3\1\u0128\20\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\16\3\1\267\6\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\3\3\1\u0129\21\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\1\3\1\346"+
    "\23\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\20\3\1\u012a\4\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\10\3\1\u012b\14\3\16\0\1\u012c\101\0"+
    "\1\u012d\56\0\1\u012e\63\0\1\u012f\63\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\7\3\1\u0130\15\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\10\3\1\u0131"+
    "\14\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\10\3\1\u0132\14\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\12\3\1\u0133\12\3\10\0\1\u0134\75\0"+
    "\1\u0135\71\0\1\u0136\101\0\1\u0137\44\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\10\3\1\u0138\14\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\7\3\1\u0139"+
    "\15\3\3\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\13\3\1\u013a\11\3\3\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\12\3\1\u0107\12\3\13\0\1\u013b\67\0"+
    "\1\u013c\5\0\1\u013d\2\0\1\u013e\2\0\1\u013f\52\0"+
    "\1\u0140\75\0\1\u0141\56\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\12\3\1\346\12\3\3\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\12\3\1\u0142\12\3\3\0"+
    "\2\3\1\0\13\3\2\0\6\3\13\0\6\3\1\u0143"+
    "\16\3\17\0\1\u0144\57\0\1\u0145\105\0\1\u0146\55\0"+
    "\1\u0147\107\0\1\u0148\54\0\1\u0149\67\0\1\u014a\5\0"+
    "\1\u014b\2\0\1\u014c\2\0\1\u014d\45\0\2\3\1\0"+
    "\13\3\2\0\6\3\13\0\3\3\1\u014e\21\3\20\0"+
    "\1\u014f\56\0\1\u0150\76\0\1\u0151\67\0\1\u0152\102\0"+
    "\1\u0153\62\0\1\u0154\57\0\1\u0155\105\0\1\u0156\55\0"+
    "\1\u0157\107\0\1\u0158\44\0\2\3\1\0\13\3\2\0"+
    "\6\3\13\0\7\3\1\u0159\15\3\21\0\1\u015a\61\0"+
    "\1\u015b\105\0\1\u015c\54\0\1\u015d\71\0\1\u015e\74\0"+
    "\1\u015f\56\0\1\u0160\76\0\1\u0161\67\0\1\u0162\102\0"+
    "\1\u0163\46\0\2\3\1\0\13\3\2\0\6\3\13\0"+
    "\1\3\1\u0164\23\3\7\0\1\u0165\73\0\1\u0166\70\0"+
    "\1\u0167\65\0\1\u0168\102\0\1\u0169\61\0\1\u016a\105\0"+
    "\1\u016b\54\0\1\u016c\71\0\1\u016d\70\0\1\u016e\63\0"+
    "\1\u016f\110\0\1\u0170\71\0\1\u0171\47\0\1\u0172\73\0"+
    "\1\u0173\70\0\1\u0174\65\0\1\u0175\107\0\1\u0176\70\0"+
    "\1\u0177\60\0\1\u0178\64\0\1\u0179\72\0\1\u017a\63\0"+
    "\1\u017b\110\0\1\u017c\71\0\1\u017d\64\0\1\u017e\72\0"+
    "\1\u017f\56\0\1\u0180\77\0\1\u0181\73\0\1\u0182\70\0"+
    "\1\u0183\60\0\1\u0184\64\0\1\u0185\76\0\1\u0186\71\0"+
    "\1\u0187\67\0\1\u0188\64\0\1\u0189\100\0\1\u018a\72\0"+
    "\1\u018b\56\0\1\u018c\77\0\1\u018d\66\0\1\u018e\70\0"+
    "\1\u018f\67\0\1\u0190\70\0\1\u0191\71\0\1\u0192\67\0"+
    "\1\u0193\64\0\1\u0194\75\0\1\u0195\70\0\1\u0196\70\0"+
    "\1\u0197\67\0\1\u0198\71\0\1\u0199\51\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20691];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\2\11\2\1\5\11\1\1\4\11"+
    "\16\1\1\11\6\0\1\11\34\1\6\0\45\1\6\0"+
    "\41\1\6\0\40\1\6\0\30\1\6\0\24\1\6\0"+
    "\15\1\2\0\1\11\3\0\11\1\4\0\1\11\7\1"+
    "\4\0\4\1\4\0\4\1\4\0\3\1\7\0\2\1"+
    "\12\0\1\1\12\0\1\1\1\11\11\0\1\1\4\0"+
    "\1\11\35\0\1\11\6\0\2\11\2\0\1\11\2\0"+
    "\3\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[409];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public int getYyLine(){
		return yyline+1;
	}
	public int getYyColumn(){
		return yycolumn+1;
	}
	public String getYyText(){
		return yytext();
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 198) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yycolumn++;System.out.println("Erreur lexical= "+ yytext()+" non reconnu ligne:" + (++yyline) +" Col : "+ (++yycolumn)+"\n" );
            }
          case 51: break;
          case 2: 
            { return new Symbol(sym.IDENT,yytext());
            }
          case 52: break;
          case 3: 
            { return new Symbol(sym.ENTIER,new Integer(yytext()));
            }
          case 53: break;
          case 4: 
            { return new Symbol(sym.UNDERSCORE);
            }
          case 54: break;
          case 5: 
            { return new Symbol(sym.PLUGR);
            }
          case 55: break;
          case 6: 
            { 
            }
          case 56: break;
          case 7: 
            { yyline++; yycolumn=0;
            }
          case 57: break;
          case 8: 
            { return new Symbol(sym.VIRG);
            }
          case 58: break;
          case 9: 
            { return new Symbol(sym.POINT);
            }
          case 59: break;
          case 10: 
            { return new Symbol(sym.DP);
            }
          case 60: break;
          case 11: 
            { return new Symbol(sym.PVIRG);
            }
          case 61: break;
          case 12: 
            { return new Symbol(sym.EG);
            }
          case 62: break;
          case 13: 
            { return new Symbol(sym.PAROUV);
            }
          case 63: break;
          case 14: 
            { return new Symbol(sym.PARFERM);
            }
          case 64: break;
          case 15: 
            { return new Symbol(sym.ACCOUV);
            }
          case 65: break;
          case 16: 
            { return new Symbol(sym.ACCCFERM);
            }
          case 66: break;
          case 17: 
            { yycolumn++;
            }
          case 67: break;
          case 18: 
            { return new Symbol(sym.DOUBLEEG);
            }
          case 68: break;
          case 19: 
            { return new Symbol(sym.TYPEAUTREAPP,yytext());
            }
          case 69: break;
          case 20: 
            { return new Symbol(sym.SI);
            }
          case 70: break;
          case 21: 
            { return new Symbol(sym.CHAINE , yytext());
            }
          case 71: break;
          case 22: 
            { return new Symbol(sym.FSI);
            }
          case 72: break;
          case 23: 
            { return new Symbol(sym.ETAT,yytext());
            }
          case 73: break;
          case 24: 
            { return new Symbol(sym.FAIT);
            }
          case 74: break;
          case 25: 
            { return new Symbol(sym.MCETAT);
            }
          case 75: break;
          case 26: 
            { return new Symbol(sym.FAIRE);
            }
          case 76: break;
          case 27: 
            { return new Symbol(sym.ALORS);
            }
          case 77: break;
          case 28: 
            { return new Symbol(sym.SINON);
            }
          case 78: break;
          case 29: 
            { return new Symbol(  sym.TYPEAPP,yytext());
            }
          case 79: break;
          case 30: 
            { return new Symbol(sym.ACTION,yytext());
            }
          case 80: break;
          case 31: 
            { return new Symbol(sym.INTERFACE,yytext());
            }
          case 81: break;
          case 32: 
            { return new Symbol(sym.MESSAGE);
            }
          case 82: break;
          case 33: 
            { return new Symbol(sym.DEFINIR);
            }
          case 83: break;
          case 34: 
            { return new Symbol(sym.POURTOUT);
            }
          case 84: break;
          case 35: 
            { return new Symbol(sym.ASSOCIER);
            }
          case 85: break;
          case 36: 
            { return new Symbol(sym.BALISEDECLSCENARIO);
            }
          case 86: break;
          case 37: 
            { return new Symbol(sym.BALISEFINSCENARIO);
            }
          case 87: break;
          case 38: 
            { return new Symbol(sym.PROGRAMMER);
            }
          case 88: break;
          case 39: 
            { return new Symbol(sym.AUTREAPPAREIL);
            }
          case 89: break;
          case 40: 
            { return new Symbol(sym.BALISEDEBPROG);
            }
          case 90: break;
          case 41: 
            { return new Symbol(sym.EXECUTERSCENARIO);
            }
          case 91: break;
          case 42: 
            { return new Symbol(sym.BALISEFINPROG);
            }
          case 92: break;
          case 43: 
            { return new Symbol(sym.BALISEDEBDECLSCENARII);
            }
          case 93: break;
          case 44: 
            { return new Symbol(sym.BALISEDEBDECLAPP);
            }
          case 94: break;
          case 45: 
            { return new Symbol(sym.BALISEDEBDECLCOMMANDE);
            }
          case 95: break;
          case 46: 
            { return new Symbol(sym.BALISEFINDECLSCENARII);
            }
          case 96: break;
          case 47: 
            { return new Symbol(sym.BALISEDEBDECLINTERF);
            }
          case 97: break;
          case 48: 
            { return new Symbol(sym.BALISEFINDECLAPP);
            }
          case 98: break;
          case 49: 
            { return new Symbol(sym.BALISEFINDECLCOMMANDE);
            }
          case 99: break;
          case 50: 
            { return new Symbol(sym.BALISEFINDECLINTERF);
            }
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
