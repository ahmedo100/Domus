import java.io.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.io.FileWriter;
parser code {:
//TODO regler MEssage , rani deja bditha , derniere haja dertha c'est modifyit act li kodam message 
//TODO le principe li rani nkhdm fih c'est la réduction de toutes les instructions des scenario apres 
//je produit le code au moment de reduction.. //// Must be done avant le 13
   public static void main(String args[]) throws Exception {
      new parser(new Yylex(new InputStreamReader(System.in))).parse();
      //debut de génération de code
      //str à écrire dans le fichier a généré...
      String genc = "public class CMaisonUser extends CMaison {\n public CMaisonUser() {\n super();\n";
      String fich2 ="// HabitatSpecific.java\nimport java.util.ArrayList;\npublic class HabitatSpecific extends Habitat {\npublic HabitatSpecific(ArrayList<CAppareil> lapp, ArrayList<CEnsAppareil> lens, ArrayList<CScenario> lscen, ArrayList<CInterface> lint, ArrayList<CProgrammation> lprog)\n{\n	super(lapp,lens,lscen,lint,lprog);\n}\n";
      fich2+="public void execScenarioNum(int num){\n";
      fich2+="System.out.println( \"Execution du scenario \"+this.l_scenarios.get(num).getNomScenario()+\"... \");\n\n";
      fich2+="     switch(num) {\n";
      for(String str :parser.scenarioSymTable.keySet()){
         System.out.println("work");
            fich2+="case "+parser.scenarioId.get(str)+ ": \n";
            fich2+=parser.scenarioSymTable.get(str).replace("\\\"","\"")+"\n";
            fich2+="break;\n";
      }

      fich2+="default:\n }\n  } \n}";
      for(Appareil app :listAppareilSymTable){
            switch(app.type){
            case NORMALTYPE : {
               String currType = getCurrType(app.typeMc);
               String[] splitType = currType.split(";");
               genc +=splitType[0]+" "+app.varName +" = new " +splitType[0]+"(\""+app.varName+"\","+splitType[1]+");\n"; 
               genc +="ma_liste_appareils.add("+app.varName+");\n";
               break;
            }
            case AUTRETYPE : {
               String currType = getCurrType(app.typeMc);
               genc +="CAutreAppareil "+app.varName +" = new CAutreAppareil(\""+app.varName+"\","+currType+");\n"; 
               genc +="ma_liste_appareils.add("+app.varName+");\n";
               break;
            }
            case INTERTYPE : {
               String currType = getCurrType(app.typeMc);
               genc +="CInterface "+app.varName +" = new CInterface(\""+app.varName+"\","+currType+");\n"; 
               genc +="ma_liste_interfaces.add("+app.varName+");\n";
               break;
            }
         }
      }
      
      // code pour générer les définitions ..
      genc+= "// Ensembles d'appareils\n";

      for(Appareil defApp :listAppareilDefSymTable){
         genc+="CEnsAppareil "+defApp.varName +" = new CEnsAppareil(\""+defApp.varName+"\");\n";
         for(String varName : defApp.defTypeListApp){
            genc+=defApp.varName+".addAppareil("+varName+");\n";
         }
         genc+="ma_liste_ens_appareils.add("+defApp.varName+");\n";
      }
      
         genc+=scenValue;
         genc+=commValue;
         genc+="monHabitat = new HabitatSpecific(ma_liste_appareils,ma_liste_ens_appareils, ma_liste_scenarios,ma_liste_interfaces, ma_liste_programmations);";
         genc+="\n} \n }";
       try{    
           FileWriter fw = new FileWriter(new File("CMaisonUser.java"));  
           FileWriter fw2 = new FileWriter(new File("HabitatSpecific.java"));
           fw2.write(fich2);
           fw2.close();
           fw.write(genc);    
           fw.close();    
          }catch(Exception e){System.out.println(e);}    
          System.out.println("Success...");    
     

   }

   public static String getCurrType(String type){
      String currType ="";
         switch(type){
            case "eclairage":  currType = "CEclairage;TypeAppareil.ECLAIRAGE"; break;
            case "chauffage":  currType = "CChauffage;TypeAppareil.CHAUFFAGE"; break;
            case "fenetre":    currType = "CVoletFenetre;TypeAppareil.FENETRE"; break;
            case "volet":      currType = "CVoletFenetre;TypeAppareil.VOLET"; break;
            case "alarme":     currType = "CAlarme;TypeAppareil.ALARME"; break;
            case "tv":          currType = "TypeAppareil.AUTRE_APPAREIL_TV"; break;
            case "hifi":       currType = "TypeAppareil.AUTRE_APPAREIL_HIFI"; break;
            case "cafetiere":  currType = "TypeAppareil.AUTRE_APPAREIL_CAFE"; break;
            case "video_proj": currType = "TypeAppareil.AUTRE_APPAREIL_VP"; break;
            case "lave_linge": currType = "TypeAppareil.AUTRE_APPAREIL_LL"; break;
            case "lave_vaisselle": currType = "TypeAppareil.AUTRE_APPAREIL_LV"; break;
            case "seche_linge": currType = "TypeAppareil.AUTRE_APPAREIL_SL"; break;
            case "portail":     currType = "TypeAppareil.AUTRE_APPAREIL_PORTAIL"; break;
            case "interrupteur": currType ="TypeInterface.INTERRUPTEUR"; break;
            case "mobile": currType ="TypeInterface.MOBILE"; break;
            case "telephone": currType ="TypeInterface.TELEPHONE"; break;
            case "telecommande": currType ="TypeInterface.TELECOMMANDE"; break;
            case "tablette": currType ="TypeInterface.TABLETTE"; break;
            case "ordinateur": currType ="TypeInterface.ORDINATEUR"; break;
            default : currType =type;
         }

         return currType;
   }

   public static String getCurrentEtat(String etat){
      String currEtat ="";
      switch(etat){
         case "allume": currEtat ="TypeEtatAppareil.ALLUME"; break;
         case "eteint": currEtat ="TypeEtatAppareil.ETEINT"; break;
         case "demi"  :	currEtat ="TypeEtatAppareil.DEMI"; break;	 
         case "eco"   : currEtat ="TypeEtatAppareil.ECO"; break;
         case "ouvert": currEtat ="TypeEtatAppareil.OUVERT"; break;
         case "ferme" : currEtat ="TypeEtatAppareil.FERME"; break;
      }

      return currEtat;
   }

   public static String getCurrentAction(String action){
      String currAction ="";
      switch(action){
         case "allumer": currAction ="TypeActionAppareil.ALLUMER"; break;
         case "ouvrir": currAction ="TypeActionAppareil.ETEINDRE"; break;
         case "fermer"  :	currAction ="TypeActionAppareil.TAMISER"; break;	 
         case "eteindre"   : currAction ="TypeActionAppareil.ALLUMER_PARTIEL"; break;
         case "allumer_partiel": currAction ="TypeActionAppareil.ALLUMER_ECO"; break;
         case "tamiser" : currAction ="TypeActionAppareil.OUVRIR"; break;
         case "allumer_eco"   : currAction ="TypeActionAppareil.FERMER"; break;
         case "fermer_partiel": currAction ="TypeActionAppareil.OUVRIR_PARTIEL"; break;
         case "ouvrir_partiel" : currAction ="TypeActionAppareil.FERMER_PARTIEL"; break;
      }

      return currAction;
   }
   public void syntax_error(Symbol cur_token){
            System.out.println("ERR "+currentToken()+ " line = "+pline() + "column " + pcol());

   }
   public void report_fatal_error(String message , Object info){
      System.out.println("ERR "+currentToken()+ " line = "+pline() + "column " + pcol());
   }
   public void report_error(String message , Object info){
      System.out.println("ERR "+currentToken()+ " line = "+pline() + "column " + pcol());

   }
   public void unrecovered_syntax_error(Symbol cur_token){
      System.out.println("ERR "+currentToken()+ " line = "+pline() + "column " + pcol());
   }   
   public int pline(){
      return ((Yylex)getScanner()).getYyLine();
   }
   public int pcol(){
      return ((Yylex)getScanner()).getYyColumn();
   }
   public String currentToken(){
      return ((Yylex)getScanner()).getYyText();
   }
   static List<Appareil> listAppareilSymTable  = new ArrayList<Appareil>();
   static List<Appareil> listAppareilDefSymTable = new ArrayList<Appareil>();
   static List<String> identListDef = new ArrayList <String>();
   static List<String> identList = new ArrayList <String>();
   static List<String> identListAutreType = new ArrayList <String>();
   static Map<String,String> scenarioSymTable = new HashMap();
   static Map<String,Integer> scenarioId = new HashMap();
   static String scenValue ="";
   static String commValue ="";   
:}
action code{:
   int scenarioCount = 0;
   public void insertIntoSymTable(DeclAppType declType,String type,List<String> strList){
         for(int i =0;i<strList.size();i++){
               String id = strList.get(i);
               parser.listAppareilSymTable.add(new Appareil(declType,id,type));
               strList.remove(i);
               }
   }

   public String createScenarioActions(String id,String action,boolean isLoop,boolean isCond){         
      String inst = "for(CAppareil appareil : this.l_appareils) ";
      String metToBeCalled ="";
      if(isLoop){
         metToBeCalled = "typeAppareil";
      }else{
         metToBeCalled = "getNomAppareil()";
      }
      if(isCond){
         inst+= " if (appareil.getNomAppareil().equals(\\\""+id+"\\\"))";
         String etat = parser.getCurrentEtat(action);
         inst+= "if (appareil.etatAppareil.equals("+etat+"))    ";
      }else {
         if(action.contains("CAppareil") || action.contains("System")){
            inst+=action;
         }else {
            if(isLoop){
               String[] currentType = parser.getCurrType(id).split(";");
               String type ="";
               if(currentType.length > 1)
                  type =currentType[1];
               else type= currentType[0];
                  inst+="if (appareil."+metToBeCalled+".equals("+type+")) appareil.appliquer("+parser.getCurrentAction(action)+");";
            }
            else
               inst+="if (appareil."+metToBeCalled+".equals(\\\""+id+"\\\")) appareil.appliquer("+parser.getCurrentAction(action)+");";
         }
      
      }
      
      return inst;
   }

   public String createScenario(String ident,String content){
      String scenarioContent ="String "+ident+"_contenu  = \""+content+"\";\n";
      String scenarioDecl = "CScenario "+ident+ "= new CScenario(\""+ident+"\","+ident+"_contenu);\nma_liste_scenarios.add("+ident+");\n";
      parser.scenarioSymTable.put(ident,content);
      return scenarioContent + scenarioDecl;
   }
   public String createExecute(Integer scenarioCount){
      return  "  this.execScenarioNum("+scenarioCount+"); ";
   }
   public String assocScenario(String id , List<String> list){
      String assoc="";
      for(String nomScenario : list )
         assoc += "    \n "+id+".addScenarioAssocie(\""+nomScenario+"\");\n";
      return assoc;
   }

   public String createProgramString(int nbProg,String nomScenario,List<Integer[]> listDate){
         String var = "p"+nbProg;
         String prog ="CProgrammation "+var+" = new CProgrammation(\""+nomScenario+"\");\n";
         int count =1;
         for(Integer[] date : listDate){
            String pdate = "d"+count;
            String d = "CDate "+var+pdate+" = new CDate(";
            String dateStr ="";
            for(int nb :date)
               dateStr+=nb+",";
            dateStr = dateStr.substring(0,dateStr.length()-1);
            d += dateStr+");\n";
            prog+= d;
            prog+=var+".addDate("+var+pdate+");\n";
         }

         prog+= "ma_liste_programmations("+var+");\n";
         return prog;
   }
   int nbProg =0;
   public boolean checkInSymTable(String id){
      boolean inSym = false;
      for(Appareil app :parser.listAppareilSymTable ){
         if(app.varName.equals(id)){
            inSym = true;
            break;
         }
      }
         return inSym || parser.identListDef.contains(id) || parser.identList.contains(id) ||  parser.identListAutreType.contains(id);
   }

   boolean isDeclPhase = true;

   public boolean checkDate(int year , int month , int day ,int heure , int minute){
      int yearLength = String.valueOf(year).length();      
      if ((yearLength == 4 || year == -1 ) && ((month>=1 && month < 12) || month == -1) && ((day > 0 && day <=31) || day == -1 ) && ((heure >= 1 && heure <= 23 ) || heure == -1) && ((minute >=0 && minute <= 59) || minute == -1)){
            return false;
      }
      return true;
   }

   boolean checkInSym(String id){
      boolean inSym = false;
      for(Appareil app :parser.listAppareilSymTable){
         if(app.varName.equals(id)){
            inSym = true;
            break;
         }
      }
      return inSym;
   }
:}

terminal BALISEDEBPROG,BALISEFINPROG,BALISEDEBDECLAPP,BALISEFINDECLAPP;
terminal BALISEDEBDECLINTERF,BALISEFINDECLINTERF,BALISEDEBDECLSCENARII;
terminal BALISEFINDECLSCENARII,BALISEDECLSCENARIO,BALISEFINSCENARIO;
terminal BALISEDEBDECLCOMMANDE,BALISEFINDECLCOMMANDE;
terminal VIRG,POINT,DP,PVIRG,ACCOUV,EG,ACCCFERM,PAROUV,PARFERM,DOUBLEEG,POURTOUT,FAIRE;
terminal FAIT,PLUGR,SI,ALORS,SINON,FSI,UNDERSCORE,MESSAGE,DEFINIR;
terminal MCETAT,AUTREAPPAREIL,PROGRAMMER,EXECUTERSCENARIO,ASSOCIER;
terminal Integer ENTIER;
terminal String TYPEAPP,ETAT,ACTION,TYPEAUTREAPP,INTERFACE,CHAINE,IDENT;
non terminal prog ,mess,act , liste , S;
non terminal String declApp,listeScenar, declInterface ;
non terminal String instrScenario,declScenarii ,declCommande ;
non terminal String instrDecl  , instrInterf;
non terminal List<String> listeIdent , assocRes;
non terminal String boucle , cond , condition,sep,chaineMessage,condBoucle,instr;
non terminal List<Integer[]> listeNbr;
non terminal Integer[] nbr;
non terminal instrComm,listeIdentTypeApp,listeIdentDef,listeIdentAutreType;
non terminal Integer var;
start with prog;
prog ::= liste {::}
        |
        |error prog

        ;
liste ::= BALISEDEBPROG declApp declInterface declScenarii declCommande BALISEFINPROG {:  :};
declApp ::= BALISEDEBDECLAPP  instrDecl    BALISEFINDECLAPP {: :}
                |
                |error declApp
                ;

instrDecl ::= 
             |TYPEAPP:type listeIdent POINT instrDecl {: insertIntoSymTable(DeclAppType.NORMALTYPE,type,parser.identList);:}
             |AUTREAPPAREIL PAROUV TYPEAUTREAPP:type PARFERM listeIdentAutreType POINT instrDecl {:  insertIntoSymTable(DeclAppType.AUTRETYPE,type,parser.identListAutreType);:}
             |DEFINIR IDENT:id EG ACCOUV listeIdentDef ACCCFERM POINT instrDecl {:  parser.listAppareilDefSymTable.add(new Appareil(DeclAppType.DEFTYPE,id,parser.identListDef));:}
             ;
listeIdent ::= IDENT:idVal S listeIdent:l {: if(isDeclPhase &&checkInSymTable(idVal)) throw new VariableAlreadyDeclaredException(idVal); parser.identList.add(idVal); l.add(idVal); RESULT =l; :}
              |IDENT:idVal {:  if(isDeclPhase && checkInSymTable(idVal)) throw new VariableAlreadyDeclaredException(idVal); parser.identList.add(idVal); List<String> ll = new ArrayList(); ll.add(idVal); RESULT = ll;:}
               ;
listeIdentAutreType ::= IDENT:idVal S listeIdentAutreType {: if(isDeclPhase &&checkInSymTable(idVal)) throw new VariableAlreadyDeclaredException(idVal); parser.identListAutreType.add(idVal); :}
                        |IDENT:idVal {: if(isDeclPhase && checkInSymTable(idVal)) throw new VariableAlreadyDeclaredException(idVal); parser.identListAutreType.add(idVal);:}
                        ;
listeIdentDef ::=  IDENT:idVal S listeIdentDef {:   parser.identListDef.add(idVal);:}
                  |IDENT:idVal {:  parser.identListDef.add(idVal);:}
                  ;

S ::= VIRG | ;
declInterface ::= BALISEDEBDECLINTERF instrInterf BALISEFINDECLINTERF;
instrInterf   ::= INTERFACE:type listeIdent POINT instrInterf  {:insertIntoSymTable(DeclAppType.INTERTYPE,type,parser.identList);:}
                  | 
                  |error instrInterf
                  ;
declScenarii  ::= BALISEDEBDECLSCENARII listeScenar BALISEFINDECLSCENARII 
                  |
                  |error declScenarii
                  ;
listeScenar   ::=  BALISEDECLSCENARIO IDENT:id {:parser.scenarioId.put(id,parser.scenarioId.size());:} PLUGR instrScenario:val BALISEFINSCENARIO IDENT PLUGR listeScenar  {:  parser.scenValue+=createScenario(id,(String)val); :}
                  | {: RESULT ="";:}
                  |error listeScenar
                  ;
instrScenario ::=  instr:val   {: RESULT = val;:}
                  | {:RESULT ="";:}
                  | error instrScenario
                  ;
condBoucle ::=  IDENT DP TYPEAPP:type {:RESULT = type;:}
               |IDENT DP IDENT:id2 {:RESULT = id2;:}
               |IDENT DP AUTREAPPAREIL PAROUV TYPEAUTREAPP:typeAutreApp PARFERM {:RESULT = typeAutreApp;:}
               |IDENT DP AUTREAPPAREIL {:RESULT = "autre_appareil";:}
               ;
condition ::= SI  cond:val   ALORS instr:i1  FSI PVIRG {: String[] tmp = ((String)(val)).split(";"); RESULT = createScenarioActions(tmp[0],tmp[1],false,true)+"{"+i1+"}"; :}
            | SI cond:val ALORS instr:i1 SINON instr:i2 FSI  PVIRG{: String[] tmp = ((String)(val)).split(";"); RESULT = createScenarioActions(tmp[0],tmp[1],false,true) + "{"+i1+"}"+"else{"+i2+"}"; :};
instr ::= act:act instrScenario:is {   :RESULT = act+ is; :}
         |mess:mess instrScenario:is {:RESULT = mess+is;:}
         |boucle:boucle instrScenario:is {:RESULT = boucle + is;:}
         |condition:condition instrScenario:is {:RESULT = condition + is;:}
         |EXECUTERSCENARIO IDENT:id PVIRG instrScenario:ins {: RESULT = createExecute(parser.scenarioId.get(id)) +ins; :}
         ;
cond ::= PAROUV IDENT:id POINT MCETAT DOUBLEEG ETAT:et PARFERM {:RESULT = id+";"+et;:};
mess ::= MESSAGE PAROUV chaineMessage:chaineVal PARFERM PVIRG {: chaineVal = ((String)(chaineVal)).replace("\"",""); RESULT = "System.out.println(\\\"Affichage console :"+chaineVal+" \\\");";:};
act  ::= IDENT:id POINT ACTION:action PVIRG {:  RESULT = createScenarioActions(id,action,false,false);:};
boucle ::= POURTOUT condBoucle:valCond FAIRE instr:inst FAIT PVIRG {:RESULT = createScenarioActions((String)valCond,(String)inst,true,false);:};

chaineMessage ::= CHAINE:val sep chaineMessage:valCh  {:RESULT = val+" "+valCh; :}
                  |IDENT:val sep  chaineMessage:valCh  {:RESULT = val+" "+valCh; :}
                  |IDENT POINT MCETAT sep  chaineMessage:valCh  {:RESULT = "Etat"+valCh;:}
                  | {:RESULT = "";:}
                  |error chaineMessage
                  ;

sep ::=  VIRG sep 
         |
         ;
declCommande ::= {:isDeclPhase = false;:} BALISEDEBDECLCOMMANDE instrComm:ic BALISEFINDECLCOMMANDE {:parser.commValue+=ic;:};
instrComm ::= ASSOCIER IDENT:id EG assocRes:res  instrComm:ic {: RESULT= assocScenario(id,res)+ ic ;:}
            |PROGRAMMER IDENT:id EG listeNbr:nb POINT instrComm:next {: String str= createProgramString(++nbProg,id,nb); RESULT = str+ next; :}
            |PROGRAMMER IDENT:id EG ACCOUV listeNbr:nb ACCCFERM POINT instrComm:next {:String str= createProgramString(++nbProg,id,nb); RESULT = str+ next; :}
            |{:RESULT ="";:}
            ;
listeNbr ::=  nbr:nb S listeNbr:ll {: ll.add(nb); RESULT = ll; System.out.println(ll);:} 
             | nbr:nb {:List<Integer[]> ll = new ArrayList<Integer[]>(); ll.add(nb); RESULT = ll; :}
             ;
nbr     ::= PAROUV var:var1 VIRG var:var2 VIRG var:var3 VIRG var:var4 VIRG var:var5 PARFERM {: if(checkDate(var1,var2,var3,var4,var5)) throw new WrongDateFormatException("");   Integer[] nbArr = {var1,var2,var3,var4,var5}; RESULT=nbArr; :};
var ::= ENTIER:val {:RESULT = new Integer(val);:} | UNDERSCORE {:RESULT = new Integer(-1);:} ;
assocRes ::= IDENT:id POINT  {:List<String> ll = new ArrayList(); ll.add(id); RESULT = ll;:}
            | ACCOUV listeIdent:ll ACCCFERM POINT {:RESULT = ll;:}
            |
            ;
